{"ast":null,"code":"/**\n * @license Angular v19.0.5\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, ɵmicrotaskEffect, assertNotInReactiveContext, signal, computed, PendingTasks, resource } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/di/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @publicApi\n */\nfunction takeUntilDestroyed(destroyRef) {\n  if (!destroyRef) {\n    assertInInjectionContext(takeUntilDestroyed);\n    destroyRef = inject(DestroyRef);\n  }\n  const destroyed$ = new Observable(observer => {\n    const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n    return unregisterFn;\n  });\n  return source => {\n    return source.pipe(takeUntil(destroyed$));\n  };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n  source;\n  destroyed = false;\n  destroyRef = inject(DestroyRef);\n  constructor(source) {\n    this.source = source;\n    this.destroyRef.onDestroy(() => {\n      this.destroyed = true;\n    });\n  }\n  subscribe(callbackFn) {\n    if (this.destroyed) {\n      throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode && 'Unexpected subscription to destroyed `OutputRef`. ' + 'The owning directive/component is destroyed.');\n    }\n    // Stop yielding more values when the directive/component is already destroyed.\n    const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n      next: value => callbackFn(value)\n    });\n    return {\n      unsubscribe: () => subscription.unsubscribe()\n    };\n  }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @publicApi\n */\nfunction outputFromObservable(observable, opts) {\n  ngDevMode && assertInInjectionContext(outputFromObservable);\n  return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @publicApi\n */\nfunction outputToObservable(ref) {\n  const destroyRef = ɵgetOutputDestroyRef(ref);\n  return new Observable(observer => {\n    // Complete the observable upon directive/component destroy.\n    // Note: May be `undefined` if an `EventEmitter` is declared outside\n    // of an injection context.\n    destroyRef?.onDestroy(() => observer.complete());\n    const subscription = ref.subscribe(v => observer.next(v));\n    return () => subscription.unsubscribe();\n  });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n  !options?.injector && assertInInjectionContext(toObservable);\n  const injector = options?.injector ?? inject(Injector);\n  const subject = new ReplaySubject(1);\n  const watcher = effect(() => {\n    let value;\n    try {\n      value = source();\n    } catch (err) {\n      untracked(() => subject.error(err));\n      return;\n    }\n    untracked(() => subject.next(value));\n  }, {\n    injector,\n    manualCleanup: true\n  });\n  injector.get(DestroyRef).onDestroy(() => {\n    watcher.destroy();\n    subject.complete();\n  });\n  return subject.asObservable();\n}\nfunction toObservableMicrotask(source, options) {\n  !options?.injector && assertInInjectionContext(toObservable);\n  const injector = options?.injector ?? inject(Injector);\n  const subject = new ReplaySubject(1);\n  const watcher = ɵmicrotaskEffect(() => {\n    let value;\n    try {\n      value = source();\n    } catch (err) {\n      untracked(() => subject.error(err));\n      return;\n    }\n    untracked(() => subject.next(value));\n  }, {\n    injector,\n    manualCleanup: true\n  });\n  injector.get(DestroyRef).onDestroy(() => {\n    watcher.destroy();\n    subject.complete();\n  });\n  return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](guide/di/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n  ngDevMode && assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' + 'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n  const requiresCleanup = !options?.manualCleanup;\n  requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n  const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;\n  const equal = makeToSignalEqual(options?.equal);\n  // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n  // the same - the returned signal gives values of type `T`.\n  let state;\n  if (options?.requireSync) {\n    // Initially the signal is in a `NoValue` state.\n    state = signal({\n      kind: 0 /* StateKind.NoValue */\n    }, {\n      equal\n    });\n  } else {\n    // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n    state = signal({\n      kind: 1 /* StateKind.Value */,\n      value: options?.initialValue\n    }, {\n      equal\n    });\n  }\n  // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n  // this, we would subscribe to the observable outside of the current reactive context, avoiding\n  // that side-effect signal reads/writes are attribute to the current consumer. The current\n  // consumer only needs to be notified when the `state` signal changes through the observable\n  // subscription. Additional context (related to async pipe):\n  // https://github.com/angular/angular/pull/50522.\n  const sub = source.subscribe({\n    next: value => state.set({\n      kind: 1 /* StateKind.Value */,\n      value\n    }),\n    error: error => {\n      if (options?.rejectErrors) {\n        // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n        // the error to end up as an uncaught exception.\n        throw error;\n      }\n      state.set({\n        kind: 2 /* StateKind.Error */,\n        error\n      });\n    }\n    // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n    // \"complete\".\n  });\n  if (options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n    throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, (typeof ngDevMode === 'undefined' || ngDevMode) && '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n  }\n  // Unsubscribe when the current context is destroyed, if requested.\n  cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n  // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n  // to either values or errors.\n  return computed(() => {\n    const current = state();\n    switch (current.kind) {\n      case 1 /* StateKind.Value */:\n        return current.value;\n      case 2 /* StateKind.Error */:\n        throw current.error;\n      case 0 /* StateKind.NoValue */:\n        // This shouldn't really happen because the error is thrown on creation.\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, (typeof ngDevMode === 'undefined' || ngDevMode) && '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n  }, {\n    equal: options?.equal\n  });\n}\nfunction makeToSignalEqual(userEquality = Object.is) {\n  return (a, b) => a.kind === 1 /* StateKind.Value */ && b.kind === 1 /* StateKind.Value */ && userEquality(a.value, b.value);\n}\n\n/**\n * Operator which makes the application unstable until the observable emits, complets, errors, or is unsubscribed.\n *\n * Use this operator in observables whose subscriptions are important for rendering and should be included in SSR serialization.\n *\n * @param injector The `Injector` to use during creation. If this is not provided, the current injection context will be used instead (via `inject`).\n *\n * @experimental\n */\nfunction pendingUntilEvent(injector) {\n  if (injector === undefined) {\n    assertInInjectionContext(pendingUntilEvent);\n    injector = inject(Injector);\n  }\n  const taskService = injector.get(PendingTasks);\n  return sourceObservable => {\n    return new Observable(originalSubscriber => {\n      // create a new task on subscription\n      const removeTask = taskService.add();\n      let cleanedUp = false;\n      function cleanupTask() {\n        if (cleanedUp) {\n          return;\n        }\n        removeTask();\n        cleanedUp = true;\n      }\n      const innerSubscription = sourceObservable.subscribe({\n        next: v => {\n          originalSubscriber.next(v);\n          cleanupTask();\n        },\n        complete: () => {\n          originalSubscriber.complete();\n          cleanupTask();\n        },\n        error: e => {\n          originalSubscriber.error(e);\n          cleanupTask();\n        }\n      });\n      innerSubscription.add(() => {\n        originalSubscriber.unsubscribe();\n        cleanupTask();\n      });\n      return innerSubscription;\n    });\n  };\n}\n\n/**\n * Like `resource` but uses an RxJS based `loader` which maps the request to an `Observable` of the\n * resource's value. Like `firstValueFrom`, only the first emission of the Observable is considered.\n *\n * @experimental\n */\nfunction rxResource(opts) {\n  opts?.injector || assertInInjectionContext(rxResource);\n  return resource({\n    ...opts,\n    loader: params => {\n      const cancelled = new Subject();\n      params.abortSignal.addEventListener('abort', () => cancelled.next());\n      // Note: this is identical to `firstValueFrom` which we can't use,\n      // because at the time of writing, `core` still supports rxjs 6.x.\n      return new Promise((resolve, reject) => {\n        opts.loader(params).pipe(take(1), takeUntil(cancelled)).subscribe({\n          next: resolve,\n          error: reject,\n          complete: () => reject(new Error('Resource completed before producing a value'))\n        });\n      });\n    }\n  });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, pendingUntilEvent, rxResource, takeUntilDestroyed, toObservable, toSignal, toObservableMicrotask as ɵtoObservableMicrotask };","map":{"version":3,"names":["assertInInjectionContext","inject","DestroyRef","ɵRuntimeError","ɵgetOutputDestroyRef","Injector","effect","untracked","ɵmicrotaskEffect","assertNotInReactiveContext","signal","computed","PendingTasks","resource","Observable","ReplaySubject","Subject","takeUntil","take","takeUntilDestroyed","destroyRef","destroyed$","observer","unregisterFn","onDestroy","next","bind","source","pipe","OutputFromObservableRef","destroyed","constructor","subscribe","callbackFn","ngDevMode","subscription","value","unsubscribe","outputFromObservable","observable","opts","outputToObservable","ref","complete","v","toObservable","options","injector","subject","watcher","err","error","manualCleanup","get","destroy","asObservable","toObservableMicrotask","toSignal","requiresCleanup","cleanupRef","equal","makeToSignalEqual","state","requireSync","kind","initialValue","sub","set","rejectErrors","current","userEquality","Object","is","a","b","pendingUntilEvent","undefined","taskService","sourceObservable","originalSubscriber","removeTask","add","cleanedUp","cleanupTask","innerSubscription","e","rxResource","loader","params","cancelled","abortSignal","addEventListener","Promise","resolve","reject","Error","ɵtoObservableMicrotask"],"sources":["C:/Users/david/Documents/frontend/75320-front/node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["/**\n * @license Angular v19.0.5\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, ɵmicrotaskEffect, assertNotInReactiveContext, signal, computed, PendingTasks, resource } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/di/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @publicApi\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable((observer) => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    source;\n    destroyed = false;\n    destroyRef = inject(DestroyRef);\n    constructor(source) {\n        this.source = source;\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: (value) => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @publicApi\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @publicApi\n */\nfunction outputToObservable(ref) {\n    const destroyRef = ɵgetOutputDestroyRef(ref);\n    return new Observable((observer) => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe((v) => observer.next(v));\n        return () => subscription.unsubscribe();\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\nfunction toObservableMicrotask(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = ɵmicrotaskEffect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](guide/di/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup\n        ? (options?.injector?.get(DestroyRef) ?? inject(DestroyRef))\n        : null;\n    const equal = makeToSignalEqual(options?.equal);\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ }, { equal });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue }, { equal });\n    }\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: (value) => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: (error) => {\n            if (options?.rejectErrors) {\n                // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n                // the error to end up as an uncaught exception.\n                throw error;\n            }\n            state.set({ kind: 2 /* StateKind.Error */, error });\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                    '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    }, { equal: options?.equal });\n}\nfunction makeToSignalEqual(userEquality = Object.is) {\n    return (a, b) => a.kind === 1 /* StateKind.Value */ && b.kind === 1 /* StateKind.Value */ && userEquality(a.value, b.value);\n}\n\n/**\n * Operator which makes the application unstable until the observable emits, complets, errors, or is unsubscribed.\n *\n * Use this operator in observables whose subscriptions are important for rendering and should be included in SSR serialization.\n *\n * @param injector The `Injector` to use during creation. If this is not provided, the current injection context will be used instead (via `inject`).\n *\n * @experimental\n */\nfunction pendingUntilEvent(injector) {\n    if (injector === undefined) {\n        assertInInjectionContext(pendingUntilEvent);\n        injector = inject(Injector);\n    }\n    const taskService = injector.get(PendingTasks);\n    return (sourceObservable) => {\n        return new Observable((originalSubscriber) => {\n            // create a new task on subscription\n            const removeTask = taskService.add();\n            let cleanedUp = false;\n            function cleanupTask() {\n                if (cleanedUp) {\n                    return;\n                }\n                removeTask();\n                cleanedUp = true;\n            }\n            const innerSubscription = sourceObservable.subscribe({\n                next: (v) => {\n                    originalSubscriber.next(v);\n                    cleanupTask();\n                },\n                complete: () => {\n                    originalSubscriber.complete();\n                    cleanupTask();\n                },\n                error: (e) => {\n                    originalSubscriber.error(e);\n                    cleanupTask();\n                },\n            });\n            innerSubscription.add(() => {\n                originalSubscriber.unsubscribe();\n                cleanupTask();\n            });\n            return innerSubscription;\n        });\n    };\n}\n\n/**\n * Like `resource` but uses an RxJS based `loader` which maps the request to an `Observable` of the\n * resource's value. Like `firstValueFrom`, only the first emission of the Observable is considered.\n *\n * @experimental\n */\nfunction rxResource(opts) {\n    opts?.injector || assertInInjectionContext(rxResource);\n    return resource({\n        ...opts,\n        loader: (params) => {\n            const cancelled = new Subject();\n            params.abortSignal.addEventListener('abort', () => cancelled.next());\n            // Note: this is identical to `firstValueFrom` which we can't use,\n            // because at the time of writing, `core` still supports rxjs 6.x.\n            return new Promise((resolve, reject) => {\n                opts\n                    .loader(params)\n                    .pipe(take(1), takeUntil(cancelled))\n                    .subscribe({\n                    next: resolve,\n                    error: reject,\n                    complete: () => reject(new Error('Resource completed before producing a value')),\n                });\n            });\n        },\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, pendingUntilEvent, rxResource, takeUntilDestroyed, toObservable, toSignal, toObservableMicrotask as ɵtoObservableMicrotask };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,wBAAwB,EAAEC,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAEC,oBAAoB,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,0BAA0B,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,eAAe;AACtO,SAASC,UAAU,EAAEC,aAAa,EAAEC,OAAO,QAAQ,MAAM;AACzD,SAASC,SAAS,EAAEC,IAAI,QAAQ,gBAAgB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,UAAU,EAAE;EACpC,IAAI,CAACA,UAAU,EAAE;IACbpB,wBAAwB,CAACmB,kBAAkB,CAAC;IAC5CC,UAAU,GAAGnB,MAAM,CAACC,UAAU,CAAC;EACnC;EACA,MAAMmB,UAAU,GAAG,IAAIP,UAAU,CAAEQ,QAAQ,IAAK;IAC5C,MAAMC,YAAY,GAAGH,UAAU,CAACI,SAAS,CAACF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAAC;IACvE,OAAOC,YAAY;EACvB,CAAC,CAAC;EACF,OAAQI,MAAM,IAAK;IACf,OAAOA,MAAM,CAACC,IAAI,CAACX,SAAS,CAACI,UAAU,CAAC,CAAC;EAC7C,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,uBAAuB,CAAC;EAC1BF,MAAM;EACNG,SAAS,GAAG,KAAK;EACjBV,UAAU,GAAGnB,MAAM,CAACC,UAAU,CAAC;EAC/B6B,WAAWA,CAACJ,MAAM,EAAE;IAChB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACP,UAAU,CAACI,SAAS,CAAC,MAAM;MAC5B,IAAI,CAACM,SAAS,GAAG,IAAI;IACzB,CAAC,CAAC;EACN;EACAE,SAASA,CAACC,UAAU,EAAE;IAClB,IAAI,IAAI,CAACH,SAAS,EAAE;MAChB,MAAM,IAAI3B,aAAa,CAAC,GAAG,CAAC,8CAA8C+B,SAAS,IAC/E,oDAAoD,GAChD,8CAA8C,CAAC;IAC3D;IACA;IACA,MAAMC,YAAY,GAAG,IAAI,CAACR,MAAM,CAACC,IAAI,CAACT,kBAAkB,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,CAACY,SAAS,CAAC;MACjFP,IAAI,EAAGW,KAAK,IAAKH,UAAU,CAACG,KAAK;IACrC,CAAC,CAAC;IACF,OAAO;MACHC,WAAW,EAAEA,CAAA,KAAMF,YAAY,CAACE,WAAW,CAAC;IAChD,CAAC;EACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACC,UAAU,EAAEC,IAAI,EAAE;EAC5CN,SAAS,IAAIlC,wBAAwB,CAACsC,oBAAoB,CAAC;EAC3D,OAAO,IAAIT,uBAAuB,CAACU,UAAU,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACC,GAAG,EAAE;EAC7B,MAAMtB,UAAU,GAAGhB,oBAAoB,CAACsC,GAAG,CAAC;EAC5C,OAAO,IAAI5B,UAAU,CAAEQ,QAAQ,IAAK;IAChC;IACA;IACA;IACAF,UAAU,EAAEI,SAAS,CAAC,MAAMF,QAAQ,CAACqB,QAAQ,CAAC,CAAC,CAAC;IAChD,MAAMR,YAAY,GAAGO,GAAG,CAACV,SAAS,CAAEY,CAAC,IAAKtB,QAAQ,CAACG,IAAI,CAACmB,CAAC,CAAC,CAAC;IAC3D,OAAO,MAAMT,YAAY,CAACE,WAAW,CAAC,CAAC;EAC3C,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,YAAYA,CAAClB,MAAM,EAAEmB,OAAO,EAAE;EACnC,CAACA,OAAO,EAAEC,QAAQ,IAAI/C,wBAAwB,CAAC6C,YAAY,CAAC;EAC5D,MAAME,QAAQ,GAAGD,OAAO,EAAEC,QAAQ,IAAI9C,MAAM,CAACI,QAAQ,CAAC;EACtD,MAAM2C,OAAO,GAAG,IAAIjC,aAAa,CAAC,CAAC,CAAC;EACpC,MAAMkC,OAAO,GAAG3C,MAAM,CAAC,MAAM;IACzB,IAAI8B,KAAK;IACT,IAAI;MACAA,KAAK,GAAGT,MAAM,CAAC,CAAC;IACpB,CAAC,CACD,OAAOuB,GAAG,EAAE;MACR3C,SAAS,CAAC,MAAMyC,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC,CAAC;MACnC;IACJ;IACA3C,SAAS,CAAC,MAAMyC,OAAO,CAACvB,IAAI,CAACW,KAAK,CAAC,CAAC;EACxC,CAAC,EAAE;IAAEW,QAAQ;IAAEK,aAAa,EAAE;EAAK,CAAC,CAAC;EACrCL,QAAQ,CAACM,GAAG,CAACnD,UAAU,CAAC,CAACsB,SAAS,CAAC,MAAM;IACrCyB,OAAO,CAACK,OAAO,CAAC,CAAC;IACjBN,OAAO,CAACL,QAAQ,CAAC,CAAC;EACtB,CAAC,CAAC;EACF,OAAOK,OAAO,CAACO,YAAY,CAAC,CAAC;AACjC;AACA,SAASC,qBAAqBA,CAAC7B,MAAM,EAAEmB,OAAO,EAAE;EAC5C,CAACA,OAAO,EAAEC,QAAQ,IAAI/C,wBAAwB,CAAC6C,YAAY,CAAC;EAC5D,MAAME,QAAQ,GAAGD,OAAO,EAAEC,QAAQ,IAAI9C,MAAM,CAACI,QAAQ,CAAC;EACtD,MAAM2C,OAAO,GAAG,IAAIjC,aAAa,CAAC,CAAC,CAAC;EACpC,MAAMkC,OAAO,GAAGzC,gBAAgB,CAAC,MAAM;IACnC,IAAI4B,KAAK;IACT,IAAI;MACAA,KAAK,GAAGT,MAAM,CAAC,CAAC;IACpB,CAAC,CACD,OAAOuB,GAAG,EAAE;MACR3C,SAAS,CAAC,MAAMyC,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC,CAAC;MACnC;IACJ;IACA3C,SAAS,CAAC,MAAMyC,OAAO,CAACvB,IAAI,CAACW,KAAK,CAAC,CAAC;EACxC,CAAC,EAAE;IAAEW,QAAQ;IAAEK,aAAa,EAAE;EAAK,CAAC,CAAC;EACrCL,QAAQ,CAACM,GAAG,CAACnD,UAAU,CAAC,CAACsB,SAAS,CAAC,MAAM;IACrCyB,OAAO,CAACK,OAAO,CAAC,CAAC;IACjBN,OAAO,CAACL,QAAQ,CAAC,CAAC;EACtB,CAAC,CAAC;EACF,OAAOK,OAAO,CAACO,YAAY,CAAC,CAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,QAAQA,CAAC9B,MAAM,EAAEmB,OAAO,EAAE;EAC/BZ,SAAS,IACLzB,0BAA0B,CAACgD,QAAQ,EAAE,2DAA2D,GAC5F,oGAAoG,CAAC;EAC7G,MAAMC,eAAe,GAAG,CAACZ,OAAO,EAAEM,aAAa;EAC/CM,eAAe,IAAI,CAACZ,OAAO,EAAEC,QAAQ,IAAI/C,wBAAwB,CAACyD,QAAQ,CAAC;EAC3E,MAAME,UAAU,GAAGD,eAAe,GAC3BZ,OAAO,EAAEC,QAAQ,EAAEM,GAAG,CAACnD,UAAU,CAAC,IAAID,MAAM,CAACC,UAAU,CAAC,GACzD,IAAI;EACV,MAAM0D,KAAK,GAAGC,iBAAiB,CAACf,OAAO,EAAEc,KAAK,CAAC;EAC/C;EACA;EACA,IAAIE,KAAK;EACT,IAAIhB,OAAO,EAAEiB,WAAW,EAAE;IACtB;IACAD,KAAK,GAAGpD,MAAM,CAAC;MAAEsD,IAAI,EAAE,CAAC,CAAC;IAAwB,CAAC,EAAE;MAAEJ;IAAM,CAAC,CAAC;EAClE,CAAC,MACI;IACD;IACAE,KAAK,GAAGpD,MAAM,CAAC;MAAEsD,IAAI,EAAE,CAAC,CAAC;MAAuB5B,KAAK,EAAEU,OAAO,EAAEmB;IAAa,CAAC,EAAE;MAAEL;IAAM,CAAC,CAAC;EAC9F;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMM,GAAG,GAAGvC,MAAM,CAACK,SAAS,CAAC;IACzBP,IAAI,EAAGW,KAAK,IAAK0B,KAAK,CAACK,GAAG,CAAC;MAAEH,IAAI,EAAE,CAAC,CAAC;MAAuB5B;IAAM,CAAC,CAAC;IACpEe,KAAK,EAAGA,KAAK,IAAK;MACd,IAAIL,OAAO,EAAEsB,YAAY,EAAE;QACvB;QACA;QACA,MAAMjB,KAAK;MACf;MACAW,KAAK,CAACK,GAAG,CAAC;QAAEH,IAAI,EAAE,CAAC,CAAC;QAAuBb;MAAM,CAAC,CAAC;IACvD;IACA;IACA;EACJ,CAAC,CAAC;EACF,IAAIL,OAAO,EAAEiB,WAAW,IAAID,KAAK,CAAC,CAAC,CAACE,IAAI,KAAK,CAAC,CAAC,yBAAyB;IACpE,MAAM,IAAI7D,aAAa,CAAC,GAAG,CAAC,wDAAwD,CAAC,OAAO+B,SAAS,KAAK,WAAW,IAAIA,SAAS,KAC9H,qFAAqF,CAAC;EAC9F;EACA;EACAyB,UAAU,EAAEnC,SAAS,CAAC0C,GAAG,CAAC7B,WAAW,CAACX,IAAI,CAACwC,GAAG,CAAC,CAAC;EAChD;EACA;EACA,OAAOvD,QAAQ,CAAC,MAAM;IAClB,MAAM0D,OAAO,GAAGP,KAAK,CAAC,CAAC;IACvB,QAAQO,OAAO,CAACL,IAAI;MAChB,KAAK,CAAC,CAAC;QACH,OAAOK,OAAO,CAACjC,KAAK;MACxB,KAAK,CAAC,CAAC;QACH,MAAMiC,OAAO,CAAClB,KAAK;MACvB,KAAK,CAAC,CAAC;QACH;QACA,MAAM,IAAIhD,aAAa,CAAC,GAAG,CAAC,wDAAwD,CAAC,OAAO+B,SAAS,KAAK,WAAW,IAAIA,SAAS,KAC9H,qFAAqF,CAAC;IAClG;EACJ,CAAC,EAAE;IAAE0B,KAAK,EAAEd,OAAO,EAAEc;EAAM,CAAC,CAAC;AACjC;AACA,SAASC,iBAAiBA,CAACS,YAAY,GAAGC,MAAM,CAACC,EAAE,EAAE;EACjD,OAAO,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACT,IAAI,KAAK,CAAC,CAAC,yBAAyBU,CAAC,CAACV,IAAI,KAAK,CAAC,CAAC,yBAAyBM,YAAY,CAACG,CAAC,CAACrC,KAAK,EAAEsC,CAAC,CAACtC,KAAK,CAAC;AAC/H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuC,iBAAiBA,CAAC5B,QAAQ,EAAE;EACjC,IAAIA,QAAQ,KAAK6B,SAAS,EAAE;IACxB5E,wBAAwB,CAAC2E,iBAAiB,CAAC;IAC3C5B,QAAQ,GAAG9C,MAAM,CAACI,QAAQ,CAAC;EAC/B;EACA,MAAMwE,WAAW,GAAG9B,QAAQ,CAACM,GAAG,CAACzC,YAAY,CAAC;EAC9C,OAAQkE,gBAAgB,IAAK;IACzB,OAAO,IAAIhE,UAAU,CAAEiE,kBAAkB,IAAK;MAC1C;MACA,MAAMC,UAAU,GAAGH,WAAW,CAACI,GAAG,CAAC,CAAC;MACpC,IAAIC,SAAS,GAAG,KAAK;MACrB,SAASC,WAAWA,CAAA,EAAG;QACnB,IAAID,SAAS,EAAE;UACX;QACJ;QACAF,UAAU,CAAC,CAAC;QACZE,SAAS,GAAG,IAAI;MACpB;MACA,MAAME,iBAAiB,GAAGN,gBAAgB,CAAC9C,SAAS,CAAC;QACjDP,IAAI,EAAGmB,CAAC,IAAK;UACTmC,kBAAkB,CAACtD,IAAI,CAACmB,CAAC,CAAC;UAC1BuC,WAAW,CAAC,CAAC;QACjB,CAAC;QACDxC,QAAQ,EAAEA,CAAA,KAAM;UACZoC,kBAAkB,CAACpC,QAAQ,CAAC,CAAC;UAC7BwC,WAAW,CAAC,CAAC;QACjB,CAAC;QACDhC,KAAK,EAAGkC,CAAC,IAAK;UACVN,kBAAkB,CAAC5B,KAAK,CAACkC,CAAC,CAAC;UAC3BF,WAAW,CAAC,CAAC;QACjB;MACJ,CAAC,CAAC;MACFC,iBAAiB,CAACH,GAAG,CAAC,MAAM;QACxBF,kBAAkB,CAAC1C,WAAW,CAAC,CAAC;QAChC8C,WAAW,CAAC,CAAC;MACjB,CAAC,CAAC;MACF,OAAOC,iBAAiB;IAC5B,CAAC,CAAC;EACN,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,UAAUA,CAAC9C,IAAI,EAAE;EACtBA,IAAI,EAAEO,QAAQ,IAAI/C,wBAAwB,CAACsF,UAAU,CAAC;EACtD,OAAOzE,QAAQ,CAAC;IACZ,GAAG2B,IAAI;IACP+C,MAAM,EAAGC,MAAM,IAAK;MAChB,MAAMC,SAAS,GAAG,IAAIzE,OAAO,CAAC,CAAC;MAC/BwE,MAAM,CAACE,WAAW,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAMF,SAAS,CAAChE,IAAI,CAAC,CAAC,CAAC;MACpE;MACA;MACA,OAAO,IAAImE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpCtD,IAAI,CACC+C,MAAM,CAACC,MAAM,CAAC,CACd5D,IAAI,CAACV,IAAI,CAAC,CAAC,CAAC,EAAED,SAAS,CAACwE,SAAS,CAAC,CAAC,CACnCzD,SAAS,CAAC;UACXP,IAAI,EAAEoE,OAAO;UACb1C,KAAK,EAAE2C,MAAM;UACbnD,QAAQ,EAAEA,CAAA,KAAMmD,MAAM,CAAC,IAAIC,KAAK,CAAC,6CAA6C,CAAC;QACnF,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN;;AAEA;AACA;AACA;;AAEA,SAASzD,oBAAoB,EAAEG,kBAAkB,EAAEkC,iBAAiB,EAAEW,UAAU,EAAEnE,kBAAkB,EAAE0B,YAAY,EAAEY,QAAQ,EAAED,qBAAqB,IAAIwC,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}