import { Directive, inject, effect, untracked, contentChild } from '@angular/core';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { NgScrollbarExt } from 'ngx-scrollbar';
import * as i0 from "@angular/core";
export class NgScrollbarCdkVirtualScroll {
    constructor() {
        this.scrollbar = inject(NgScrollbarExt, { self: true });
        this.virtualScrollViewportRef = contentChild(CdkVirtualScrollViewport);
        this.scrollbar.skipInit = true;
        effect(() => {
            const virtualScrollViewport = this.virtualScrollViewportRef();
            untracked(() => {
                if (virtualScrollViewport) {
                    const viewport = virtualScrollViewport.elementRef.nativeElement;
                    const contentWrapper = virtualScrollViewport._contentWrapper.nativeElement;
                    const spacer = virtualScrollViewport.elementRef.nativeElement.querySelector('.cdk-virtual-scroll-spacer');
                    this.scrollbar.skipInit = false;
                    this.scrollbar.altViewport.set(viewport);
                    this.scrollbar.altContentWrapper.set(contentWrapper);
                    this.scrollbar.altSpacer.set(spacer);
                }
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarCdkVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.2.11", type: NgScrollbarCdkVirtualScroll, isStandalone: true, selector: "ng-scrollbar[cdkVirtualScrollViewport]", queries: [{ propertyName: "virtualScrollViewportRef", first: true, predicate: CdkVirtualScrollViewport, descendants: true, isSignal: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarCdkVirtualScroll, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-scrollbar[cdkVirtualScrollViewport]'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLXZpcnR1YWwtc2Nyb2xsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNjcm9sbGJhci9jZGsvc3JjL2Nkay12aXJ0dWFsLXNjcm9sbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0vQyxNQUFNLE9BQU8sMkJBQTJCO0lBTXRDO1FBSmlCLGNBQVMsR0FBbUIsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRW5FLDZCQUF3QixHQUFxQyxZQUFZLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUduSCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFL0IsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLE1BQU0scUJBQXFCLEdBQTZCLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBRXhGLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2IsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO29CQUMxQixNQUFNLFFBQVEsR0FBZ0IscUJBQXFCLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztvQkFDN0UsTUFBTSxjQUFjLEdBQWdCLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUM7b0JBQ3hGLE1BQU0sTUFBTSxHQUFnQixxQkFBcUIsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO29CQUV2SCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7b0JBQ3JELElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdkMsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOytHQXpCVSwyQkFBMkI7bUdBQTNCLDJCQUEyQix3SkFJcUQsd0JBQXdCOzs0RkFKeEcsMkJBQTJCO2tCQUp2QyxTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsd0NBQXdDO2lCQUNuRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgaW5qZWN0LCBlZmZlY3QsIHVudHJhY2tlZCwgY29udGVudENoaWxkLCBTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XHJcbmltcG9ydCB7IE5nU2Nyb2xsYmFyRXh0IH0gZnJvbSAnbmd4LXNjcm9sbGJhcic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIHNlbGVjdG9yOiAnbmctc2Nyb2xsYmFyW2Nka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Njcm9sbGJhckNka1ZpcnR1YWxTY3JvbGwge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHNjcm9sbGJhcjogTmdTY3JvbGxiYXJFeHQgPSBpbmplY3QoTmdTY3JvbGxiYXJFeHQsIHsgc2VsZjogdHJ1ZSB9KTtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSB2aXJ0dWFsU2Nyb2xsVmlld3BvcnRSZWY6IFNpZ25hbDxDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQ+ID0gY29udGVudENoaWxkKENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5zY3JvbGxiYXIuc2tpcEluaXQgPSB0cnVlO1xyXG5cclxuICAgIGVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZpcnR1YWxTY3JvbGxWaWV3cG9ydDogQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0ID0gdGhpcy52aXJ0dWFsU2Nyb2xsVmlld3BvcnRSZWYoKTtcclxuXHJcbiAgICAgIHVudHJhY2tlZCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHZpcnR1YWxTY3JvbGxWaWV3cG9ydCkge1xyXG4gICAgICAgICAgY29uc3Qgdmlld3BvcnQ6IEhUTUxFbGVtZW50ID0gdmlydHVhbFNjcm9sbFZpZXdwb3J0LmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgIGNvbnN0IGNvbnRlbnRXcmFwcGVyOiBIVE1MRWxlbWVudCA9IHZpcnR1YWxTY3JvbGxWaWV3cG9ydC5fY29udGVudFdyYXBwZXIubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgIGNvbnN0IHNwYWNlcjogSFRNTEVsZW1lbnQgPSB2aXJ0dWFsU2Nyb2xsVmlld3BvcnQuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jZGstdmlydHVhbC1zY3JvbGwtc3BhY2VyJyk7XHJcblxyXG4gICAgICAgICAgdGhpcy5zY3JvbGxiYXIuc2tpcEluaXQgPSBmYWxzZTtcclxuICAgICAgICAgIHRoaXMuc2Nyb2xsYmFyLmFsdFZpZXdwb3J0LnNldCh2aWV3cG9ydCk7XHJcbiAgICAgICAgICB0aGlzLnNjcm9sbGJhci5hbHRDb250ZW50V3JhcHBlci5zZXQoY29udGVudFdyYXBwZXIpO1xyXG4gICAgICAgICAgdGhpcy5zY3JvbGxiYXIuYWx0U3BhY2VyLnNldChzcGFjZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19