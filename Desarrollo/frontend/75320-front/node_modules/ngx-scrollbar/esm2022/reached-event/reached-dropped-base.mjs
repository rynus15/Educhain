import { Directive, inject, effect, runInInjectionContext, NgZone, Injector, Renderer2, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NG_SCROLLBAR } from 'ngx-scrollbar';
import * as i0 from "@angular/core";
export class ReachedDroppedBase {
    constructor() {
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this.zone = inject(NgZone);
        this.renderer = inject(Renderer2);
        this.injector = inject(Injector);
        this.scrollbar = inject(NG_SCROLLBAR, { self: true });
        /** An array that contains all trigger elements  **/
        this.triggerElements = [];
        /** An array that contains the chosen outputs */
        this.subscribedEvents = [];
        /** A mapper function to ease forwarding the intersected element to its proper output */
        this.eventActions = {
            top: { emit: () => this.scrollbar.isVerticallyScrollable() ? this.top.emit() : null },
            bottom: { emit: () => this.scrollbar.isVerticallyScrollable() ? this.bottom.emit() : null },
            start: { emit: () => this.scrollbar.isHorizontallyScrollable() ? this.start.emit() : null },
            end: { emit: () => this.scrollbar.isHorizontallyScrollable() ? this.end.emit() : null }
        };
    }
    onAction(trigger) {
        if (trigger) {
            this.eventActions[trigger]?.emit();
        }
    }
    setCssVariable(property, value) {
        if (value) {
            this.scrollbar.nativeElement.style.setProperty(property, `${value}px`);
        }
    }
    activate() {
        this.zone.runOutsideAngular(() => {
            // Create the scrollbars element inside the viewport
            this.triggerElementsWrapper = this.renderer.createElement('div');
            this.renderer.addClass(this.triggerElementsWrapper, this.triggerElementsWrapperClass);
            this.renderer.appendChild(this.scrollbar.viewport.contentWrapperElement, this.triggerElementsWrapper);
            // Create a trigger element for each subscribed event
            this.subscribedEvents.forEach((event) => {
                const triggerElement = this.renderer.createElement('div');
                this.renderer.addClass(triggerElement, this.triggerElementClass);
                this.renderer.setAttribute(triggerElement, 'trigger', event);
                this.renderer.appendChild(this.triggerElementsWrapper, triggerElement);
                this.triggerElements.push(triggerElement);
            });
            // The first time the observer is triggered as soon as the element is observed,
            // This flag is used to ignore this first trigger
            let intersectionObserverInit = false;
            this.intersectionObserver = new IntersectionObserver((entries) => {
                if (intersectionObserverInit) {
                    entries.forEach((entry) => {
                        if (this.isTriggered(entry)) {
                            // Forward the detected trigger element only after the observer is initialized
                            // Only observe the trigger elements when scrollable
                            this.zone.run(() => this.onAction(entry.target.getAttribute('trigger')));
                        }
                    });
                }
                else {
                    // Once the initial element is detected set a flag to true
                    intersectionObserverInit = true;
                }
            }, {
                root: this.scrollbar.viewport.nativeElement,
            });
            this.triggerElements.forEach((el) => this.intersectionObserver.observe(el));
        });
    }
    deactivate() {
        this.intersectionObserver?.disconnect();
        this.triggerElementsWrapper?.remove();
        this.triggerElements = [];
    }
    ngOnInit() {
        if (this.top.observed) {
            this.subscribedEvents.push('top');
        }
        if (this.bottom.observed) {
            this.subscribedEvents.push('bottom');
        }
        if (this.start.observed) {
            this.subscribedEvents.push('start');
        }
        if (this.end.observed) {
            this.subscribedEvents.push('end');
        }
        runInInjectionContext(this.injector, () => {
            effect(() => {
                if (this.disabled()) {
                    this.deactivate();
                }
                else {
                    if (this.isBrowser) {
                        this.activate();
                    }
                }
            });
        });
    }
    ngOnDestroy() {
        this.deactivate();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: ReachedDroppedBase, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.11", type: ReachedDroppedBase, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: ReachedDroppedBase, decorators: [{
            type: Directive
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY2hlZC1kcm9wcGVkLWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3JlYWNoZWQtZXZlbnQvc3JjL3JlYWNoZWQtZHJvcHBlZC1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLE1BQU0sRUFDTixxQkFBcUIsRUFHckIsTUFBTSxFQUNOLFFBQVEsRUFDUixTQUFTLEVBRVQsV0FBVyxFQUVaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBZ0IsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU8zRCxNQUFNLE9BQWdCLGtCQUFrQjtJQUR4QztRQUdxQixjQUFTLEdBQVksaUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFFNUQsU0FBSSxHQUFXLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU5QixhQUFRLEdBQWMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXhDLGFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdEMsY0FBUyxHQUFpQixNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFbEYsb0RBQW9EO1FBQzFDLG9CQUFlLEdBQWtCLEVBQUUsQ0FBQztRQUs5QyxnREFBZ0Q7UUFDdEMscUJBQWdCLEdBQWEsRUFBRSxDQUFDO1FBdUIxQyx3RkFBd0Y7UUFDL0UsaUJBQVksR0FBZ0M7WUFDbkQsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FB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eEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVELHFCQUFxQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQ3hDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNwQixDQUFDO3FCQUFNLENBQUM7b0JBQ04sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDbEIsQ0FBQztnQkFDSCxDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7K0dBMUltQixrQkFBa0I7bUdBQWxCLGtCQUFrQjs7NEZBQWxCLGtCQUFrQjtrQkFEdkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIGluamVjdCxcclxuICBlZmZlY3QsXHJcbiAgcnVuSW5JbmplY3Rpb25Db250ZXh0LFxyXG4gIE9uSW5pdCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgTmdab25lLFxyXG4gIEluamVjdG9yLFxyXG4gIFJlbmRlcmVyMixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgUExBVEZPUk1fSUQsXHJcbiAgSW5wdXRTaWduYWxXaXRoVHJhbnNmb3JtXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgX05nU2Nyb2xsYmFyLCBOR19TQ1JPTExCQVIgfSBmcm9tICduZ3gtc2Nyb2xsYmFyJztcclxuXHJcbnR5cGUgRXZlbnRBY3Rpb24gPSB7XHJcbiAgZW1pdDogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuQERpcmVjdGl2ZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZWFjaGVkRHJvcHBlZEJhc2UgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIHByb3RlY3RlZCByZWFkb25seSBpc0Jyb3dzZXI6IGJvb2xlYW4gPSBpc1BsYXRmb3JtQnJvd3NlcihpbmplY3QoUExBVEZPUk1fSUQpKTtcclxuXHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHpvbmU6IE5nWm9uZSA9IGluamVjdChOZ1pvbmUpO1xyXG5cclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMiA9IGluamVjdChSZW5kZXJlcjIpO1xyXG5cclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcclxuXHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHNjcm9sbGJhcjogX05nU2Nyb2xsYmFyID0gaW5qZWN0KE5HX1NDUk9MTEJBUiwgeyBzZWxmOiB0cnVlIH0pO1xyXG5cclxuICAvKiogQW4gYXJyYXkgdGhhdCBjb250YWlucyBhbGwgdHJpZ2dlciBlbGVtZW50cyAgKiovXHJcbiAgcHJvdGVjdGVkIHRyaWdnZXJFbGVtZW50czogSFRNTEVsZW1lbnRbXSA9IFtdO1xyXG5cclxuICAvKiogVGhlIGludGVyc2VjdGlvbiBvYnNlcnZlciByZWZlcmVuY2UgKi9cclxuICBwcm90ZWN0ZWQgaW50ZXJzZWN0aW9uT2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyO1xyXG5cclxuICAvKiogQW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgY2hvc2VuIG91dHB1dHMgKi9cclxuICBwcm90ZWN0ZWQgc3Vic2NyaWJlZEV2ZW50czogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgLyoqIFRoZSB3cmFwcGVyIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgdHJpZ2dlciBlbGVtZW50cyAqL1xyXG4gIHByb3RlY3RlZCB0cmlnZ2VyRWxlbWVudHNXcmFwcGVyOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgLyoqIFRoZSB3cmFwcGVyIGVsZW1lbnQgY2xhc3MgbmFtZSAqL1xyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCB0cmlnZ2VyRWxlbWVudHNXcmFwcGVyQ2xhc3M6IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSB0cmlnZ2VyIGVsZW1lbnQgY2xhc3MgbmFtZSAqL1xyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCB0cmlnZ2VyRWxlbWVudENsYXNzOiBzdHJpbmc7XHJcblxyXG4gIGFic3RyYWN0IGRpc2FibGVkOiBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm08Ym9vbGVhbiwgc3RyaW5nIHwgYm9vbGVhbj47XHJcblxyXG4gIGFic3RyYWN0IHRvcDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG5cclxuICBhYnN0cmFjdCBib3R0b206IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuXHJcbiAgYWJzdHJhY3Qgc3RhcnQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuXHJcbiAgYWJzdHJhY3QgZW5kOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBpc1RyaWdnZXJlZChlbnRyeTogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSk6IGJvb2xlYW47XHJcblxyXG4gIC8qKiBBIG1hcHBlciBmdW5jdGlvbiB0byBlYXNlIGZvcndhcmRpbmcgdGhlIGludGVyc2VjdGVkIGVsZW1lbnQgdG8gaXRzIHByb3BlciBvdXRwdXQgKi9cclxuICByZWFkb25seSBldmVudEFjdGlvbnM6IFJlY29yZDxzdHJpbmcsIEV2ZW50QWN0aW9uPiA9IHtcclxuICAgIHRvcDogeyBlbWl0OiAoKTogdm9pZCA9PiB0aGlzLnNjcm9sbGJhci5pc1ZlcnRpY2FsbHlTY3JvbGxhYmxlKCkgPyB0aGlzLnRvcC5lbWl0KCkgOiBudWxsIH0sXHJcbiAgICBib3R0b206IHsgZW1pdDogKCk6IHZvaWQgPT4gdGhpcy5zY3JvbGxiYXIuaXNWZXJ0aWNhbGx5U2Nyb2xsYWJsZSgpID8gdGhpcy5ib3R0b20uZW1pdCgpIDogbnVsbCB9LFxyXG4gICAgc3RhcnQ6IHsgZW1pdDogKCk6IHZvaWQgPT4gdGhpcy5zY3JvbGxiYXIuaXNIb3Jpem9udGFsbHlTY3JvbGxhYmxlKCkgPyB0aGlzLnN0YXJ0LmVtaXQoKSA6IG51bGwgfSxcclxuICAgIGVuZDogeyBlbWl0OiAoKTogdm9pZCA9PiB0aGlzLnNjcm9sbGJhci5pc0hvcml6b250YWxseVNjcm9sbGFibGUoKSA/IHRoaXMuZW5kLmVtaXQoKSA6IG51bGwgfVxyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgb25BY3Rpb24odHJpZ2dlcjogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodHJpZ2dlcikge1xyXG4gICAgICB0aGlzLmV2ZW50QWN0aW9uc1t0cmlnZ2VyXT8uZW1pdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNldENzc1ZhcmlhYmxlKHByb3BlcnR5OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICB0aGlzLnNjcm9sbGJhci5uYXRpdmVFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCBgJHsgdmFsdWUgfXB4YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFjdGl2YXRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgLy8gQ3JlYXRlIHRoZSBzY3JvbGxiYXJzIGVsZW1lbnQgaW5zaWRlIHRoZSB2aWV3cG9ydFxyXG4gICAgICB0aGlzLnRyaWdnZXJFbGVtZW50c1dyYXBwZXIgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMudHJpZ2dlckVsZW1lbnRzV3JhcHBlciwgdGhpcy50cmlnZ2VyRWxlbWVudHNXcmFwcGVyQ2xhc3MpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuc2Nyb2xsYmFyLnZpZXdwb3J0LmNvbnRlbnRXcmFwcGVyRWxlbWVudCwgdGhpcy50cmlnZ2VyRWxlbWVudHNXcmFwcGVyKTtcclxuXHJcbiAgICAgIC8vIENyZWF0ZSBhIHRyaWdnZXIgZWxlbWVudCBmb3IgZWFjaCBzdWJzY3JpYmVkIGV2ZW50XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlZEV2ZW50cy5mb3JFYWNoKChldmVudDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdHJpZ2dlckVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRyaWdnZXJFbGVtZW50LCB0aGlzLnRyaWdnZXJFbGVtZW50Q2xhc3MpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRyaWdnZXJFbGVtZW50LCAndHJpZ2dlcicsIGV2ZW50KTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMudHJpZ2dlckVsZW1lbnRzV3JhcHBlciwgdHJpZ2dlckVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMudHJpZ2dlckVsZW1lbnRzLnB1c2godHJpZ2dlckVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIHRoZSBvYnNlcnZlciBpcyB0cmlnZ2VyZWQgYXMgc29vbiBhcyB0aGUgZWxlbWVudCBpcyBvYnNlcnZlZCxcclxuICAgICAgLy8gVGhpcyBmbGFnIGlzIHVzZWQgdG8gaWdub3JlIHRoaXMgZmlyc3QgdHJpZ2dlclxyXG4gICAgICBsZXQgaW50ZXJzZWN0aW9uT2JzZXJ2ZXJJbml0OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10pID0+IHtcclxuICAgICAgICBpZiAoaW50ZXJzZWN0aW9uT2JzZXJ2ZXJJbml0KSB7XHJcbiAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5OiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVHJpZ2dlcmVkKGVudHJ5KSkge1xyXG4gICAgICAgICAgICAgIC8vIEZvcndhcmQgdGhlIGRldGVjdGVkIHRyaWdnZXIgZWxlbWVudCBvbmx5IGFmdGVyIHRoZSBvYnNlcnZlciBpcyBpbml0aWFsaXplZFxyXG4gICAgICAgICAgICAgIC8vIE9ubHkgb2JzZXJ2ZSB0aGUgdHJpZ2dlciBlbGVtZW50cyB3aGVuIHNjcm9sbGFibGVcclxuICAgICAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHRoaXMub25BY3Rpb24oZW50cnkudGFyZ2V0LmdldEF0dHJpYnV0ZSgndHJpZ2dlcicpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBPbmNlIHRoZSBpbml0aWFsIGVsZW1lbnQgaXMgZGV0ZWN0ZWQgc2V0IGEgZmxhZyB0byB0cnVlXHJcbiAgICAgICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlckluaXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwge1xyXG4gICAgICAgIHJvb3Q6IHRoaXMuc2Nyb2xsYmFyLnZpZXdwb3J0Lm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy50cmlnZ2VyRWxlbWVudHMuZm9yRWFjaCgoZWw6IEhUTUxFbGVtZW50KSA9PiB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoZWwpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZWFjdGl2YXRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xyXG4gICAgdGhpcy50cmlnZ2VyRWxlbWVudHNXcmFwcGVyPy5yZW1vdmUoKTtcclxuICAgIHRoaXMudHJpZ2dlckVsZW1lbnRzID0gW107XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnRvcC5vYnNlcnZlZCkge1xyXG4gICAgICB0aGlzLnN1YnNjcmliZWRFdmVudHMucHVzaCgndG9wJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5ib3R0b20ub2JzZXJ2ZWQpIHtcclxuICAgICAgdGhpcy5zdWJzY3JpYmVkRXZlbnRzLnB1c2goJ2JvdHRvbScpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc3RhcnQub2JzZXJ2ZWQpIHtcclxuICAgICAgdGhpcy5zdWJzY3JpYmVkRXZlbnRzLnB1c2goJ3N0YXJ0Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5lbmQub2JzZXJ2ZWQpIHtcclxuICAgICAgdGhpcy5zdWJzY3JpYmVkRXZlbnRzLnB1c2goJ2VuZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJ1bkluSW5qZWN0aW9uQ29udGV4dCh0aGlzLmluamVjdG9yLCAoKSA9PiB7XHJcbiAgICAgIGVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQoKSkge1xyXG4gICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmICh0aGlzLmlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcclxuICB9XHJcbn1cclxuIl19