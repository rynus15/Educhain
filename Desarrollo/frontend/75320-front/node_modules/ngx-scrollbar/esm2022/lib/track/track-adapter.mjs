import { Directive, effect, inject, PLATFORM_ID, untracked } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { delay, fromEvent, map, merge, startWith, switchMap, takeUntil, takeWhile, tap, EMPTY } from 'rxjs';
import { enableSelection, preventSelection, stopPropagation } from '../utils/common';
import { PointerEventsAdapter } from '../utils/pointer-events-adapter';
import * as i0 from "@angular/core";
export class TrackAdapter extends PointerEventsAdapter {
    // Returns viewport client size
    get viewportSize() {
        return this.cmp.viewport[this.control.sizeProperty];
    }
    // Get track client rect
    get clientRect() {
        return this.nativeElement.getBoundingClientRect();
    }
    // Scrollbar track offset
    get offset() {
        return this.clientRect[this.control.rectOffsetProperty];
    }
    // Scrollbar track length
    get size() {
        // Noticed that clientHeight is evaluated before getClientRect.height,
        // causing a wrong track size when integrated in dropdown integration
        return this.nativeElement[this.control.sizeProperty];
    }
    // Observable for track dragging events
    get pointerEvents() {
        // Observable streams for pointer events
        const pointerDown$ = fromEvent(this.nativeElement, 'pointerdown').pipe(stopPropagation(), preventSelection(this.document));
        const pointerUp$ = fromEvent(this.document, 'pointerup', { passive: true }).pipe(enableSelection(this.document));
        const pointerEnter$ = fromEvent(this.nativeElement, 'pointerover', { passive: true }).pipe(
        // When mouse is out and enters again, must set the current position first
        tap((e) => this.currMousePosition = e[this.control.offsetProperty]), map(() => true));
        const pointerLeave$ = fromEvent(this.nativeElement, 'pointerout', { passive: true }).pipe(map(() => false));
        const pointerOver$ = merge(pointerEnter$, pointerLeave$).pipe(startWith(true));
        // Keep track of current mouse location while dragging
        const pointerMove$ = fromEvent(this.nativeElement, 'pointermove', { passive: true }).pipe(tap((e) => this.currMousePosition = e[this.control.offsetProperty]));
        return pointerDown$.pipe(switchMap((startEvent) => {
            // Track pointer location while dragging
            pointerMove$.pipe(takeUntil(pointerUp$)).subscribe();
            return this.onTrackFirstClick(startEvent).pipe(delay(200), switchMap(() => {
                // Otherwise, activate pointermove and pointerout events and switch to ongoing scroll calls
                return pointerOver$.pipe(switchMap((over) => {
                    const currDirection = this.getScrollDirection(this.currMousePosition);
                    const sameDirection = this.scrollDirection === currDirection;
                    // If mouse is out the track pause the scroll calls, otherwise keep going
                    return (over && sameDirection) ? this.onTrackOngoingMousedown() : EMPTY;
                }));
            }), takeUntil(pointerUp$));
        }));
    }
    constructor() {
        effect(() => {
            this.cmp.viewportDimension();
            this.cmp.contentDimension();
            // Avoid SSR error because we're using `requestAnimationFrame`
            if (!this.isBrowser)
                return;
            untracked(() => {
                // Use animation frame to give the track element time to render (avoid size 0)
                requestAnimationFrame(() => this.control.trackSize.set(this.size));
            });
        });
        super();
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
    }
    /**
     *  Callback when mouse is first clicked on the track
     */
    onTrackFirstClick(e) {
        // Initialize variables and determine scroll direction
        this.currMousePosition = e[this.control.offsetProperty];
        this.scrollDirection = this.getScrollDirection(this.currMousePosition);
        this.scrollMax = this.control.viewportScrollMax;
        return this.scrollTo(this.nextStep());
    }
    nextStep() {
        // Check which direction should the scroll go (forward or backward)
        if (this.scrollDirection === 'forward') {
            // Scroll forward
            const scrollForwardIncrement = this.getScrollForwardStep();
            // Check if the incremental position is bigger than the scroll max
            if (scrollForwardIncrement >= this.scrollMax) {
                return this.scrollMax;
            }
            return scrollForwardIncrement;
        }
        // Scroll backward
        const scrollBackwardIncrement = this.getScrollBackwardStep();
        if (scrollBackwardIncrement <= 0) {
            return 0;
        }
        return scrollBackwardIncrement;
    }
    /**
     * Callback when mouse is still down on the track
     * Incrementally scrolls towards target position until reached
     */
    onTrackOngoingMousedown() {
        const position = this.nextStep();
        return this.scrollTo(position).pipe(takeWhile(() => !this.isReached(position)), switchMap(() => this.onTrackOngoingMousedown()));
    }
    /**
     * Returns a flag that determines whether the scroll from the given position is the final step or not
     */
    isReached(position) {
        if (this.scrollDirection === 'forward') {
            return position >= this.scrollMax;
        }
        return position <= 0;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: TrackAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.11", type: TrackAdapter, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: TrackAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,