import { InjectionToken } from '@angular/core';
import { defaultOptions, defaultScrollTimelinePolyfill } from './ng-scrollbar.default';
export var ScrollbarUpdateReason;
(function (ScrollbarUpdateReason) {
    ScrollbarUpdateReason["AfterInit"] = "AfterInit";
    ScrollbarUpdateReason["Resized"] = "ResizeObserver";
})(ScrollbarUpdateReason || (ScrollbarUpdateReason = {}));
export const NG_SCROLLBAR_OPTIONS = new InjectionToken('NG_SCROLLBAR_OPTIONS', {
    providedIn: 'root',
    factory: () => defaultOptions
});
export const NG_SCROLLBAR_POLYFILL = new InjectionToken('NG_SCROLLBAR_POLYFILL', {
    providedIn: 'root',
    factory: () => defaultScrollTimelinePolyfill
});
export function filterResizeEntries(entries, target) {
    return entries.filter((entry) => entry.target === target)[0]?.contentRect;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsYmFyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNjcm9sbGJhci9zcmMvbGliL25nLXNjcm9sbGJhci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQU92RixNQUFNLENBQU4sSUFBWSxxQkFHWDtBQUhELFdBQVkscUJBQXFCO0lBQy9CLGdEQUF1QixDQUFBO0lBQ3ZCLG1EQUEwQixDQUFBO0FBQzVCLENBQUMsRUFIVyxxQkFBcUIsS0FBckIscUJBQXFCLFFBR2hDO0FBRUQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQXVDLElBQUksY0FBYyxDQUFxQixzQkFBc0IsRUFBRTtJQUNySSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsY0FBYztDQUM5QixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBMkIsSUFBSSxjQUFjLENBQVMsdUJBQXVCLEVBQUU7SUFDL0csVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLDZCQUE2QjtDQUM3QyxDQUFDLENBQUM7QUEwREgsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE9BQThCLEVBQUUsTUFBZTtJQUNqRixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUEwQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQztBQUNqRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZGVmYXVsdE9wdGlvbnMsIGRlZmF1bHRTY3JvbGxUaW1lbGluZVBvbHlmaWxsIH0gZnJvbSAnLi9uZy1zY3JvbGxiYXIuZGVmYXVsdCc7XHJcblxyXG5leHBvcnQgdHlwZSBTY3JvbGxiYXJBcHBlYXJhbmNlID0gJ25hdGl2ZScgfCAnY29tcGFjdCc7XHJcbmV4cG9ydCB0eXBlIFNjcm9sbGJhck9yaWVudGF0aW9uID0gJ2F1dG8nIHwgJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJztcclxuZXhwb3J0IHR5cGUgU2Nyb2xsYmFyVmlzaWJpbGl0eSA9ICduYXRpdmUnIHwgJ2hvdmVyJyB8ICd2aXNpYmxlJztcclxuZXhwb3J0IHR5cGUgU2Nyb2xsYmFyUG9zaXRpb24gPSAnbmF0aXZlJyB8ICdpbnZlcnRZJyB8ICdpbnZlcnRYJyB8ICdpbnZlcnRBbGwnO1xyXG5cclxuZXhwb3J0IGVudW0gU2Nyb2xsYmFyVXBkYXRlUmVhc29uIHtcclxuICBBZnRlckluaXQgPSAnQWZ0ZXJJbml0JyxcclxuICBSZXNpemVkID0gJ1Jlc2l6ZU9ic2VydmVyJ1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTkdfU0NST0xMQkFSX09QVElPTlM6IEluamVjdGlvblRva2VuPE5nU2Nyb2xsYmFyT3B0aW9ucz4gPSBuZXcgSW5qZWN0aW9uVG9rZW48TmdTY3JvbGxiYXJPcHRpb25zPignTkdfU0NST0xMQkFSX09QVElPTlMnLCB7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG4gIGZhY3Rvcnk6ICgpID0+IGRlZmF1bHRPcHRpb25zXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IE5HX1NDUk9MTEJBUl9QT0xZRklMTDogSW5qZWN0aW9uVG9rZW48c3RyaW5nPiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdOR19TQ1JPTExCQVJfUE9MWUZJTEwnLCB7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG4gIGZhY3Rvcnk6ICgpID0+IGRlZmF1bHRTY3JvbGxUaW1lbGluZVBvbHlmaWxsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOZ1Njcm9sbGJhck9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHNjcm9sbCBheGlzIG9mIHRoZSB2aWV3cG9ydC5cclxuICAgKiAtICdhdXRvJzogU2Nyb2xsYmFycyBhcmUgZGlzcGxheWVkIGZvciBib3RoIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHNjcm9sbGluZy5cclxuICAgKiAtICd2ZXJ0aWNhbCc6IFNjcm9sbGJhcnMgYXJlIGRpc3BsYXllZCBmb3IgdmVydGljYWwgc2Nyb2xsaW5nLlxyXG4gICAqIC0gJ2hvcml6b250YWwnOiBTY3JvbGxiYXJzIGFyZSBkaXNwbGF5ZWQgZm9yIGhvcml6b250YWwgc2Nyb2xsaW5nLlxyXG4gICAqIERlZmF1bHRzIHRvICdhdXRvJy5cclxuICAgKi9cclxuICBvcmllbnRhdGlvbj86IFNjcm9sbGJhck9yaWVudGF0aW9uO1xyXG5cclxuICAvKipcclxuICAgKiBEZXRlcm1pbmVzIHdoZW4gdG8gc2hvdyB0aGUgc2Nyb2xsYmFyLlxyXG4gICAqIC0gJ25hdGl2ZSc6IFNjcm9sbGJhciBpcyB2aXNpYmxlIHdoZW4gdGhlIHZpZXdwb3J0IGlzIHNjcm9sbGFibGUsIHNpbWlsYXIgdG8gbmF0aXZlIHNjcm9sbGJhcnMuXHJcbiAgICogLSAnaG92ZXInOiBTY3JvbGxiYXJzIGFyZSBoaWRkZW4gYnkgZGVmYXVsdCBhbmQgYmVjb21lIHZpc2libGUgb24gc2Nyb2xsaW5nIG9yIGhvdmVyaW5nLlxyXG4gICAqIC0gJ3Zpc2libGUnOiBTY3JvbGxiYXJzIGFyZSBhbHdheXMgdmlzaWJsZSwgZXZlbiBpZiB0aGUgdmlld3BvcnQgaXMgbm90IHNjcm9sbGFibGUuXHJcbiAgICogRGVmYXVsdHMgdG8gJ25hdGl2ZScuXHJcbiAgICovXHJcbiAgdmlzaWJpbGl0eT86IFNjcm9sbGJhclZpc2liaWxpdHk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHNjcm9sbGJhci5cclxuICAgKiAtICduYXRpdmUnOiBTY3JvbGxiYXIgc3BhY2UgaXMgcmVzZXJ2ZWQgd2l0aGluIHRoZSB2aWV3cG9ydCwgc2ltaWxhciB0byBuYXRpdmUgc2Nyb2xsYmFycy5cclxuICAgKiAtICdjb21wYWN0JzogU2Nyb2xsYmFycyBkbyBub3QgcmVzZXJ2ZSBhbnkgc3BhY2UgYW5kIGFyZSBwbGFjZWQgb3ZlciB0aGUgdmlld3BvcnQuXHJcbiAgICogRGVmYXVsdHMgdG8gJ25hdGl2ZScuXHJcbiAgICovXHJcbiAgYXBwZWFyYW5jZT86IFNjcm9sbGJhckFwcGVhcmFuY2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIGVhY2ggc2Nyb2xsYmFyLlxyXG4gICAqIC0gJ25hdGl2ZSc6IFVzZXMgdGhlIGRlZmF1bHQgcG9zaXRpb24gYXMgaW4gbmF0aXZlIHNjcm9sbGJhcnMuXHJcbiAgICogLSAnaW52ZXJ0WSc6IEludmVydHMgdGhlIHZlcnRpY2FsIHNjcm9sbGJhciBwb3NpdGlvbi5cclxuICAgKiAtICdpbnZlcnRYJzogSW52ZXJ0cyB0aGUgaG9yaXpvbnRhbCBzY3JvbGxiYXIgcG9zaXRpb24uXHJcbiAgICogLSAnaW52ZXJ0QWxsJzogSW52ZXJ0cyB0aGUgcG9zaXRpb25zIG9mIGJvdGggdmVydGljYWwgYW5kIGhvcml6b250YWwgc2Nyb2xsYmFycy5cclxuICAgKiBEZWZhdWx0cyB0byAnbmF0aXZlJy5cclxuICAgKi9cclxuICBwb3NpdGlvbj86IFNjcm9sbGJhclBvc2l0aW9uO1xyXG4gIC8qKiBBIGNsYXNzIGZvcndhcmRlZCB0byB0aGUgc2Nyb2xsYmFyIHRyYWNrIGVsZW1lbnQgKi9cclxuICB0cmFja0NsYXNzPzogc3RyaW5nO1xyXG4gIC8qKiBBIGNsYXNzIGZvcndhcmRlZCB0byB0aGUgc2Nyb2xsYmFyIHRodW1iIGVsZW1lbnQgKi9cclxuICB0aHVtYkNsYXNzPzogc3RyaW5nO1xyXG4gIC8qKiBBIGNsYXNzIGZvcndhcmRlZCB0byB0aGUgc2Nyb2xsYmFyIGJ1dHRvbiBlbGVtZW50ICovXHJcbiAgYnV0dG9uQ2xhc3M/OiBzdHJpbmc7XHJcbiAgLyoqIFNjcm9sbGluZyBzcGVlZCB3aGVuIGNsaWNraW5nIG9uIHNjcm9sbGJhciByYWlsICovXHJcbiAgdHJhY2tTY3JvbGxEdXJhdGlvbj86IG51bWJlcjtcclxuICAvKiogQSBmbGFnIHVzZWQgdG8gZW5hYmxlL2Rpc2FibGUgdGhlIHNjcm9sbGJhciBwb2ludGVyIGV2ZW50cyAqL1xyXG4gIGRpc2FibGVJbnRlcmFjdGlvbj86IGJvb2xlYW47XHJcbiAgLyoqIERlYm91bmNlIGludGVydmFsIGZvciBkZXRlY3RpbmcgY2hhbmdlcyB2aWEgUmVzaXplT2JzZXJ2ZXIgKi9cclxuICBzZW5zb3JUaHJvdHRsZVRpbWU/OiBudW1iZXI7XHJcbiAgLyoqIFdoZXRoZXIgUmVzaXplT2JzZXJ2ZXIgaXMgZGlzYWJsZWQgKi9cclxuICBkaXNhYmxlU2Vuc29yPzogYm9vbGVhbjtcclxuICAvKiogU2hvdyBzY3JvbGxiYXIgYnV0dG9ucyAqL1xyXG4gIGJ1dHRvbnM/OiBib29sZWFuO1xyXG4gIC8qKiBBIGZsYWcgdXNlZCB0byBhY3RpdmF0ZSBob3ZlciBlZmZlY3Qgb24gdGhlIG9mZnNldCBhcmVhIGFyb3VuZCB0aGUgc2Nyb2xsYmFyICovXHJcbiAgaG92ZXJPZmZzZXQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyUmVzaXplRW50cmllcyhlbnRyaWVzOiBSZXNpemVPYnNlcnZlckVudHJ5W10sIHRhcmdldDogRWxlbWVudCk6IERPTVJlY3RSZWFkT25seSB7XHJcbiAgcmV0dXJuIGVudHJpZXMuZmlsdGVyKChlbnRyeTogUmVzaXplT2JzZXJ2ZXJFbnRyeSkgPT4gZW50cnkudGFyZ2V0ID09PSB0YXJnZXQpWzBdPy5jb250ZW50UmVjdDtcclxufVxyXG4iXX0=