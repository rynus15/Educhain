import { Directive, inject, signal, effect, output, computed, untracked, numberAttribute, booleanAttribute, input, NgZone, ElementRef, } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { Directionality } from '@angular/cdk/bidi';
import { SharedResizeObserver } from '@angular/cdk/observers/private';
import { toSignal } from '@angular/core/rxjs-interop';
import { combineLatest } from 'rxjs';
import { SmoothScrollManager } from 'ngx-scrollbar/smooth-scroll';
import { NG_SCROLLBAR } from './utils/scrollbar-base';
import { ViewportAdapter } from './viewport';
import { getThrottledStream } from './utils/common';
import { NG_SCROLLBAR_OPTIONS, ScrollbarUpdateReason } from './ng-scrollbar.model';
import * as i0 from "@angular/core";
export class NgScrollbarCore {
    constructor() {
        /** Global options */
        this.options = inject(NG_SCROLLBAR_OPTIONS);
        this.sharedResizeObserver = inject(SharedResizeObserver);
        this.zone = inject(NgZone);
        this.platform = inject(Platform);
        /** A flag that indicates if the platform is mobile */
        this.isMobile = this.platform.IOS || this.platform.ANDROID;
        this.dir = inject(Directionality);
        this.smoothScroll = inject(SmoothScrollManager);
        /** Viewport adapter instance */
        this.viewport = inject(ViewportAdapter, { self: true });
        this.nativeElement = inject((ElementRef)).nativeElement;
        /**
         * Indicates if the direction is 'ltr' or 'rtl'
         */
        this.direction = toSignal(this.dir.change, { initialValue: this.dir.value });
        /**
         * Indicates when scrollbar thumb is being dragged
         */
        this.dragging = signal('none');
        /**
         * Sets the supported scroll track of the viewport, there are 3 options:
         *
         * - `vertical` Use both vertical and horizontal scrollbar
         * - `horizontal` Use both vertical and horizontal scrollbar
         * - `auto` Use both vertical and horizontal scrollbar
         */
        this.orientation = input(this.options.orientation);
        /**
         * When to show the scrollbar, and there are 3 options:
         *
         * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar
         * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering
         * - `always` Scrollbars are always shown even if the viewport is not scrollable
         */
        this.visibility = input(this.options.visibility);
        /** Show scrollbar buttons */
        this.buttons = input(this.options.buttons, {
            transform: booleanAttribute
        });
        /** Disables scrollbar interaction like dragging thumb and jumping by track click */
        this.disableInteraction = input(this.options.disableInteraction, {
            transform: booleanAttribute
        });
        /** Whether ResizeObserver is disabled */
        this.disableSensor = input(this.options.disableSensor, {
            transform: booleanAttribute
        });
        /** Throttle interval for detecting changes via ResizeObserver */
        this.sensorThrottleTime = input(this.options.sensorThrottleTime, {
            transform: numberAttribute
        });
        /** A flag used to activate hover effect on the offset area around the scrollbar */
        this.hoverOffset = input(this.options.hoverOffset, {
            transform: booleanAttribute
        });
        /** Viewport dimension */
        this.viewportDimension = signal({ width: 0, height: 0 });
        /** Content dimension */
        this.contentDimension = signal({ width: 0, height: 0 });
        this.state = computed(() => {
            let verticalUsed = false;
            let horizontalUsed = false;
            let isVerticallyScrollable = false;
            let isHorizontallyScrollable = false;
            const orientation = this.orientation();
            const visibility = this.visibility();
            const viewportDimensions = this.viewportDimension();
            const contentDimensions = this.contentDimension();
            // Check if vertical scrollbar should be displayed
            if (orientation === 'auto' || orientation === 'vertical') {
                isVerticallyScrollable = contentDimensions.height > viewportDimensions.height;
                verticalUsed = visibility === 'visible' || isVerticallyScrollable;
            }
            // Check if horizontal scrollbar should be displayed
            if (orientation === 'auto' || orientation === 'horizontal') {
                isHorizontallyScrollable = contentDimensions.width > viewportDimensions.width;
                horizontalUsed = visibility === 'visible' || isHorizontallyScrollable;
            }
            return {
                verticalUsed,
                horizontalUsed,
                isVerticallyScrollable,
                isHorizontallyScrollable,
            };
        });
        this.isVerticallyScrollable = computed(() => this.state().isVerticallyScrollable);
        this.isHorizontallyScrollable = computed(() => this.state().isHorizontallyScrollable);
        this.verticalUsed = computed(() => this.state().verticalUsed);
        this.horizontalUsed = computed(() => this.state().horizontalUsed);
        /** Scroll duration when the scroll track is clicked */
        this.trackScrollDuration = input(this.options.trackScrollDuration, {
            transform: numberAttribute
        });
        /**
         *  Sets the appearance of the scrollbar, there are 2 options:
         *
         * - `native` (default) scrollbar space will be reserved just like with native scrollbar.
         * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.
         */
        this.appearance = input(this.options.appearance);
        /**
         * Sets the position of each scrollbar, there are 4 options:
         *
         * - `native` (Default) Use the default position like in native scrollbar.
         * - `invertY` Inverts vertical scrollbar position
         * - `invertX` Inverts Horizontal scrollbar position
         * - `invertAll` Inverts both scrollbar positions
         */
        this.position = input(this.options.position);
        /** A class forwarded to the scrollbar track element */
        this.trackClass = input(this.options.trackClass);
        /** A class forwarded to the scrollbar thumb element */
        this.thumbClass = input(this.options.thumbClass);
        /** A class forwarded to the scrollbar button element */
        this.buttonClass = input(this.options.thumbClass);
        /** Steam that emits when scrollbar is initialized */
        this.afterInit = output();
        /** Steam that emits when scrollbar is updated */
        this.afterUpdate = output();
        let resizeSub$;
        let hasInitialized;
        effect((onCleanup) => {
            const disableSensor = this.disableSensor();
            const throttleDuration = this.sensorThrottleTime();
            const viewportInit = this.viewport.initialized();
            untracked(() => {
                if (viewportInit) {
                    // If resize sensor is disabled, update manually the first time
                    if (disableSensor) {
                        requestAnimationFrame(() => this.update(ScrollbarUpdateReason.AfterInit));
                    }
                    else {
                        // Observe size changes for viewport and content wrapper
                        this.zone.runOutsideAngular(() => {
                            resizeSub$ = getThrottledStream(combineLatest([
                                this.sharedResizeObserver.observe(this.viewport.nativeElement),
                                this.sharedResizeObserver.observe(this.viewport.contentWrapperElement)
                            ]), throttleDuration).subscribe(() => {
                                // After deep investigation, it appears that setting the dimension directly from the element properties
                                // is much faster than to set them from resize callback values
                                this.zone.run(() => {
                                    this.updateDimensions();
                                    if (hasInitialized) {
                                        this.afterUpdate.emit();
                                    }
                                    else {
                                        this.afterInit.emit();
                                    }
                                    hasInitialized = true;
                                });
                            });
                        });
                    }
                }
                onCleanup(() => resizeSub$?.unsubscribe());
            });
        });
    }
    /**
     * Manual update
     */
    update(reason) {
        this.updateDimensions();
        if (reason === ScrollbarUpdateReason.AfterInit) {
            this.afterInit.emit();
        }
        else {
            this.afterUpdate.emit();
        }
    }
    /**
     * Smooth scroll functions
     */
    scrollTo(options) {
        return this.smoothScroll.scrollTo(this.viewport.nativeElement, options);
    }
    /**
     * Scroll to element by reference or selector
     */
    scrollToElement(target, options) {
        return this.smoothScroll.scrollToElement(this.viewport.nativeElement, target, options);
    }
    updateDimensions() {
        this.viewportDimension.set({ width: this.viewport.offsetWidth, height: this.viewport.offsetHeight });
        this.contentDimension.set({ width: this.viewport.contentWidth, height: this.viewport.contentHeight });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarCore, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.11", type: NgScrollbarCore, inputs: { orientation: { classPropertyName: "orientation", publicName: "orientation", isSignal: true, isRequired: false, transformFunction: null }, visibility: { classPropertyName: "visibility", publicName: "visibility", isSignal: true, isRequired: false, transformFunction: null }, buttons: { classPropertyName: "buttons", publicName: "buttons", isSignal: true, isRequired: false, transformFunction: null }, disableInteraction: { classPropertyName: "disableInteraction", publicName: "disableInteraction", isSignal: true, isRequired: false, transformFunction: null }, disableSensor: { classPropertyName: "disableSensor", publicName: "disableSensor", isSignal: true, isRequired: false, transformFunction: null }, sensorThrottleTime: { classPropertyName: "sensorThrottleTime", publicName: "sensorThrottleTime", isSignal: true, isRequired: false, transformFunction: null }, hoverOffset: { classPropertyName: "hoverOffset", publicName: "hoverOffset", isSignal: true, isRequired: false, transformFunction: null }, trackScrollDuration: { classPropertyName: "trackScrollDuration", publicName: "trackScrollDuration", isSignal: true, isRequired: false, transformFunction: null }, appearance: { classPropertyName: "appearance", publicName: "appearance", isSignal: true, isRequired: false, transformFunction: null }, position: { classPropertyName: "position", publicName: "position", isSignal: true, isRequired: false, transformFunction: null }, trackClass: { classPropertyName: "trackClass", publicName: "trackClass", isSignal: true, isRequired: false, transformFunction: null }, thumbClass: { classPropertyName: "thumbClass", publicName: "thumbClass", isSignal: true, isRequired: false, transformFunction: null }, buttonClass: { classPropertyName: "buttonClass", publicName: "buttonClass", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { afterInit: "afterInit", afterUpdate: "afterUpdate" }, host: { properties: { "class.ng-scrollbar": "true", "attr.verticalUsed": "verticalUsed()", "attr.horizontalUsed": "horizontalUsed()", "attr.isVerticallyScrollable": "isVerticallyScrollable()", "attr.isHorizontallyScrollable": "isHorizontallyScrollable()", "attr.mobile": "isMobile", "attr.dir": "direction()", "attr.position": "position()", "attr.dragging": "dragging()", "attr.appearance": "appearance()", "attr.visibility": "visibility()", "attr.orientation": "orientation()", "attr.disableInteraction": "disableInteraction()", "style.--content-height": "contentDimension().height", "style.--content-width": "contentDimension().width", "style.--viewport-height": "viewportDimension().height", "style.--viewport-width": "viewportDimension().width" } }, providers: [
            { provide: NG_SCROLLBAR, useExisting: NgScrollbarCore }
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarCore, decorators: [{
            type: Directive,
            args: [{
                    host: {
                        '[class.ng-scrollbar]': 'true',
                        '[attr.verticalUsed]': 'verticalUsed()',
                        '[attr.horizontalUsed]': 'horizontalUsed()',
                        '[attr.isVerticallyScrollable]': 'isVerticallyScrollable()',
                        '[attr.isHorizontallyScrollable]': 'isHorizontallyScrollable()',
                        '[attr.mobile]': 'isMobile',
                        '[attr.dir]': 'direction()',
                        '[attr.position]': 'position()',
                        '[attr.dragging]': 'dragging()',
                        '[attr.appearance]': 'appearance()',
                        '[attr.visibility]': 'visibility()',
                        '[attr.orientation]': 'orientation()',
                        '[attr.disableInteraction]': 'disableInteraction()',
                        '[style.--content-height]': 'contentDimension().height',
                        '[style.--content-width]': 'contentDimension().width',
                        '[style.--viewport-height]': 'viewportDimension().height',
                        '[style.--viewport-width]': 'viewportDimension().width'
                    },
                    providers: [
                        { provide: NG_SCROLLBAR, useExisting: NgScrollbarCore }
                    ]
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,