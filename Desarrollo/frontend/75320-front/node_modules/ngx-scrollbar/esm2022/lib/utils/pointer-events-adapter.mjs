import { Directive, effect, inject, untracked, ElementRef, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_SCROLLBAR } from '../utils/scrollbar-base';
import { SCROLLBAR_CONTROL } from '../scrollbar/scrollbar-adapter';
import * as i0 from "@angular/core";
export class PointerEventsAdapter {
    constructor() {
        // Reference to the NgScrollbar component
        this.cmp = inject(NG_SCROLLBAR);
        // Reference to the Scrollbar control component
        this.control = inject(SCROLLBAR_CONTROL);
        // Reference to the Document element
        this.document = inject(DOCUMENT);
        // Reference to angular zone
        this.zone = inject(NgZone);
        // The native element of the directive
        this.nativeElement = inject((ElementRef)).nativeElement;
        effect((onCleanup) => {
            const disableInteraction = this.cmp.disableInteraction();
            untracked(() => {
                if (!disableInteraction) {
                    this.zone.runOutsideAngular(() => {
                        this._pointerEventsSub = this.pointerEvents.subscribe();
                    });
                }
                onCleanup(() => this._pointerEventsSub?.unsubscribe());
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: PointerEventsAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.11", type: PointerEventsAdapter, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: PointerEventsAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci1ldmVudHMtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi91dGlscy9wb2ludGVyLWV2ZW50cy1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFBZ0IsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckUsT0FBTyxFQUFFLGlCQUFpQixFQUFvQixNQUFNLGdDQUFnQyxDQUFDOztBQUdyRixNQUFNLE9BQWdCLG9CQUFvQjtJQXNCeEM7UUFwQkEseUNBQXlDO1FBQ3RCLFFBQUcsR0FBaUIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTVELCtDQUErQztRQUM1QixZQUFPLEdBQXFCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRXpFLG9DQUFvQztRQUNqQixhQUFRLEdBQWEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXpELDRCQUE0QjtRQUNULFNBQUksR0FBVyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsc0NBQXNDO1FBQzdCLGtCQUFhLEdBQWdCLE1BQU0sQ0FBQyxDQUFBLFVBQXVCLENBQUEsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQVFsRixNQUFNLENBQUMsQ0FBQyxTQUFrQyxFQUFFLEVBQUU7WUFDNUMsTUFBTSxrQkFBa0IsR0FBWSxJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFFbEUsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDYixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztvQkFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7d0JBQy9CLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUMxRCxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDO2dCQUVELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0FwQ21CLG9CQUFvQjttR0FBcEIsb0JBQW9COzs0RkFBcEIsb0JBQW9CO2tCQUR6QyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBlZmZlY3QsIGluamVjdCwgdW50cmFja2VkLCBFbGVtZW50UmVmLCBOZ1pvbmUsIEVmZmVjdENsZWFudXBSZWdpc3RlckZuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IF9OZ1Njcm9sbGJhciwgTkdfU0NST0xMQkFSIH0gZnJvbSAnLi4vdXRpbHMvc2Nyb2xsYmFyLWJhc2UnO1xyXG5pbXBvcnQgeyBTQ1JPTExCQVJfQ09OVFJPTCwgU2Nyb2xsYmFyQWRhcHRlciB9IGZyb20gJy4uL3Njcm9sbGJhci9zY3JvbGxiYXItYWRhcHRlcic7XHJcblxyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvaW50ZXJFdmVudHNBZGFwdGVyIHtcclxuXHJcbiAgLy8gUmVmZXJlbmNlIHRvIHRoZSBOZ1Njcm9sbGJhciBjb21wb25lbnRcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY21wOiBfTmdTY3JvbGxiYXIgPSBpbmplY3QoTkdfU0NST0xMQkFSKTtcclxuXHJcbiAgLy8gUmVmZXJlbmNlIHRvIHRoZSBTY3JvbGxiYXIgY29udHJvbCBjb21wb25lbnRcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29udHJvbDogU2Nyb2xsYmFyQWRhcHRlciA9IGluamVjdChTQ1JPTExCQVJfQ09OVFJPTCk7XHJcblxyXG4gIC8vIFJlZmVyZW5jZSB0byB0aGUgRG9jdW1lbnQgZWxlbWVudFxyXG4gIHByb3RlY3RlZCByZWFkb25seSBkb2N1bWVudDogRG9jdW1lbnQgPSBpbmplY3QoRE9DVU1FTlQpO1xyXG5cclxuICAvLyBSZWZlcmVuY2UgdG8gYW5ndWxhciB6b25lXHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHpvbmU6IE5nWm9uZSA9IGluamVjdChOZ1pvbmUpO1xyXG5cclxuICAvLyBUaGUgbmF0aXZlIGVsZW1lbnQgb2YgdGhlIGRpcmVjdGl2ZVxyXG4gIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gaW5qZWN0KEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KS5uYXRpdmVFbGVtZW50O1xyXG5cclxuICAvLyBQb2ludGVyIGV2ZW50cyBzdWJzY3JpcHRpb24gKG1hZGUgcHVibGljIGZvciB0ZXN0aW5nIHB1cnBvc2UpXHJcbiAgX3BvaW50ZXJFdmVudHNTdWI6IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgYWJzdHJhY3QgZ2V0IHBvaW50ZXJFdmVudHMoKTogT2JzZXJ2YWJsZTxQb2ludGVyRXZlbnQ+O1xyXG5cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XHJcbiAgICBlZmZlY3QoKG9uQ2xlYW51cDogRWZmZWN0Q2xlYW51cFJlZ2lzdGVyRm4pID0+IHtcclxuICAgICAgY29uc3QgZGlzYWJsZUludGVyYWN0aW9uOiBib29sZWFuID0gdGhpcy5jbXAuZGlzYWJsZUludGVyYWN0aW9uKCk7XHJcblxyXG4gICAgICB1bnRyYWNrZWQoKCkgPT4ge1xyXG4gICAgICAgIGlmICghZGlzYWJsZUludGVyYWN0aW9uKSB7XHJcbiAgICAgICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9wb2ludGVyRXZlbnRzU3ViID0gdGhpcy5wb2ludGVyRXZlbnRzLnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvbkNsZWFudXAoKCkgPT4gdGhpcy5fcG9pbnRlckV2ZW50c1N1Yj8udW5zdWJzY3JpYmUoKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==