import { NgModule } from '@angular/core';
import { NgScrollbar } from './ng-scrollbar';
import { ScrollViewport } from './viewport';
import { NgScrollbarExt } from './ng-scrollbar-ext';
import { NG_SCROLLBAR_OPTIONS, NG_SCROLLBAR_POLYFILL } from './ng-scrollbar.model';
import { AsyncDetection } from './async-detection';
import { defaultOptions } from './ng-scrollbar.default';
import { SyncSpacer } from './sync-spacer';
import * as i0 from "@angular/core";
export class NgScrollbarModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarModule, imports: [NgScrollbar,
            ScrollViewport,
            NgScrollbarExt,
            AsyncDetection,
            SyncSpacer], exports: [NgScrollbar,
            ScrollViewport,
            NgScrollbarExt,
            AsyncDetection,
            SyncSpacer] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        NgScrollbar,
                        ScrollViewport,
                        NgScrollbarExt,
                        AsyncDetection,
                        SyncSpacer
                    ],
                    exports: [
                        NgScrollbar,
                        ScrollViewport,
                        NgScrollbarExt,
                        AsyncDetection,
                        SyncSpacer
                    ]
                }]
        }] });
export function provideScrollbarOptions(options) {
    return [
        {
            provide: NG_SCROLLBAR_OPTIONS,
            useValue: { ...defaultOptions, ...options }
        }
    ];
}
export function provideScrollbarPolyfill(url) {
    return [
        {
            provide: NG_SCROLLBAR_POLYFILL,
            useValue: url
        }
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsYmFyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi9uZy1zY3JvbGxiYXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDNUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBc0IsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBa0IzQyxNQUFNLE9BQU8saUJBQWlCOytHQUFqQixpQkFBaUI7Z0hBQWpCLGlCQUFpQixZQWQxQixXQUFXO1lBQ1gsY0FBYztZQUNkLGNBQWM7WUFDZCxjQUFjO1lBQ2QsVUFBVSxhQUdWLFdBQVc7WUFDWCxjQUFjO1lBQ2QsY0FBYztZQUNkLGNBQWM7WUFDZCxVQUFVO2dIQUdELGlCQUFpQjs7NEZBQWpCLGlCQUFpQjtrQkFoQjdCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLFdBQVc7d0JBQ1gsY0FBYzt3QkFDZCxjQUFjO3dCQUNkLGNBQWM7d0JBQ2QsVUFBVTtxQkFDWDtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsV0FBVzt3QkFDWCxjQUFjO3dCQUNkLGNBQWM7d0JBQ2QsY0FBYzt3QkFDZCxVQUFVO3FCQUNYO2lCQUNGOztBQUlELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxPQUEyQjtJQUNqRSxPQUFPO1FBQ0w7WUFDRSxPQUFPLEVBQUUsb0JBQW9CO1lBQzdCLFFBQVEsRUFBRSxFQUFFLEdBQUcsY0FBYyxFQUFFLEdBQUcsT0FBTyxFQUFFO1NBQzVDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsR0FBVztJQUNsRCxPQUFPO1FBQ0w7WUFDRSxPQUFPLEVBQUUscUJBQXFCO1lBQzlCLFFBQVEsRUFBRSxHQUFHO1NBQ2Q7S0FDRixDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ1Njcm9sbGJhciB9IGZyb20gJy4vbmctc2Nyb2xsYmFyJztcclxuaW1wb3J0IHsgU2Nyb2xsVmlld3BvcnQgfSBmcm9tICcuL3ZpZXdwb3J0JztcclxuaW1wb3J0IHsgTmdTY3JvbGxiYXJFeHQgfSBmcm9tICcuL25nLXNjcm9sbGJhci1leHQnO1xyXG5pbXBvcnQgeyBOR19TQ1JPTExCQVJfT1BUSU9OUywgTkdfU0NST0xMQkFSX1BPTFlGSUxMLCBOZ1Njcm9sbGJhck9wdGlvbnMgfSBmcm9tICcuL25nLXNjcm9sbGJhci5tb2RlbCc7XHJcbmltcG9ydCB7IEFzeW5jRGV0ZWN0aW9uIH0gZnJvbSAnLi9hc3luYy1kZXRlY3Rpb24nO1xyXG5pbXBvcnQgeyBkZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4vbmctc2Nyb2xsYmFyLmRlZmF1bHQnO1xyXG5pbXBvcnQgeyBTeW5jU3BhY2VyIH0gZnJvbSAnLi9zeW5jLXNwYWNlcic7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIE5nU2Nyb2xsYmFyLFxyXG4gICAgU2Nyb2xsVmlld3BvcnQsXHJcbiAgICBOZ1Njcm9sbGJhckV4dCxcclxuICAgIEFzeW5jRGV0ZWN0aW9uLFxyXG4gICAgU3luY1NwYWNlclxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgTmdTY3JvbGxiYXIsXHJcbiAgICBTY3JvbGxWaWV3cG9ydCxcclxuICAgIE5nU2Nyb2xsYmFyRXh0LFxyXG4gICAgQXN5bmNEZXRlY3Rpb24sXHJcbiAgICBTeW5jU3BhY2VyXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTY3JvbGxiYXJNb2R1bGUge1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVNjcm9sbGJhck9wdGlvbnMob3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zKTogUHJvdmlkZXJbXSB7XHJcbiAgcmV0dXJuIFtcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogTkdfU0NST0xMQkFSX09QVElPTlMsXHJcbiAgICAgIHVzZVZhbHVlOiB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH1cclxuICAgIH1cclxuICBdXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlU2Nyb2xsYmFyUG9seWZpbGwodXJsOiBzdHJpbmcpOiBQcm92aWRlcltdIHtcclxuICByZXR1cm4gW1xyXG4gICAge1xyXG4gICAgICBwcm92aWRlOiBOR19TQ1JPTExCQVJfUE9MWUZJTEwsXHJcbiAgICAgIHVzZVZhbHVlOiB1cmxcclxuICAgIH1cclxuICBdXHJcbn1cclxuIl19