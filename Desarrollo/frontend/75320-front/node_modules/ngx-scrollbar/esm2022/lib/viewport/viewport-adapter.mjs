import { Injectable, signal } from '@angular/core';
import { ViewportClasses } from '../utils/common';
import * as i0 from "@angular/core";
/**
 * Class representing a viewport adapter.
 * Provides methods and properties to interact with a viewport and its content.
 */
export class ViewportAdapter {
    constructor() {
        /*
         * A signal that indicates when viewport adapter is initialized
         */
        this.initialized = signal(false);
    }
    /** Viewport clientHeight */
    get offsetHeight() {
        return this.nativeElement.offsetHeight;
    }
    /** Viewport clientWidth */
    get offsetWidth() {
        return this.nativeElement.offsetWidth;
    }
    /** Viewport scrollTop */
    get scrollTop() {
        return this.nativeElement.scrollTop;
    }
    /** Viewport scrollLeft */
    get scrollLeft() {
        return this.nativeElement.scrollLeft;
    }
    /** Content height */
    get contentHeight() {
        return this.contentWrapperElement.offsetHeight;
    }
    /** Content width */
    get contentWidth() {
        return this.contentWrapperElement.offsetWidth;
    }
    /** The remaining vertical scrollable distance. */
    get scrollMaxX() {
        return this.contentWidth - this.offsetWidth;
    }
    /** The vertical remaining scrollable distance */
    get scrollMaxY() {
        return this.contentHeight - this.offsetHeight;
    }
    /**
     * Initialize viewport
     */
    init(viewportElement, contentElement, spacerElement) {
        // Add viewport class
        viewportElement.classList.add(ViewportClasses.Viewport);
        this.nativeElement = viewportElement;
        // Add content wrapper class
        contentElement.classList.add(ViewportClasses.Content);
        // When integrating the scrollbar with virtual scroll, the content wrapper will have fake size,
        // and a spacer element will have the real size
        // Therefore, if spaceElement is provided, it will be observed instead of the content wrapper
        if (spacerElement) {
            spacerElement.classList.add(ViewportClasses.Spacer);
            this.contentWrapperElement = spacerElement;
        }
        else {
            // If spacer is not provided, set it as the content wrapper
            this.contentWrapperElement = contentElement;
        }
        this.initialized.set(true);
    }
    reset() {
        this.nativeElement = null;
        this.contentWrapperElement = null;
        this.initialized.set(false);
    }
    /**
     * Scrolls the viewport vertically to the specified value.
     */
    scrollYTo(value) {
        this.nativeElement.scrollTop = value;
    }
    /**
     * Scrolls the viewport horizontally to the specified value.
     */
    scrollXTo(value) {
        this.nativeElement.scrollLeft = value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: ViewportAdapter, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: ViewportAdapter }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: ViewportAdapter, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3BvcnQtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi92aWV3cG9ydC92aWV3cG9ydC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRWxEOzs7R0FHRztBQUVILE1BQU0sT0FBTyxlQUFlO0lBRDVCO1FBYUU7O1dBRUc7UUFDSCxnQkFBVyxHQUE0QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7S0FxRnREO0lBbkZDLDRCQUE0QjtJQUM1QixJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7SUFFRCwyQkFBMkI7SUFDM0IsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDO0lBRUQseUJBQXlCO0lBQ3pCLElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDdEMsQ0FBQztJQUVELDBCQUEwQjtJQUMxQixJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxxQkFBcUI7SUFDckIsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDO0lBQ2pELENBQUM7SUFFRCxvQkFBb0I7SUFDcEIsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDO0lBQ2hELENBQUM7SUFFRCxrREFBa0Q7SUFDbEQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDOUMsQ0FBQztJQUVELGlEQUFpRDtJQUNqRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUNoRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLENBQUMsZUFBNEIsRUFBRSxjQUEyQixFQUFFLGFBQTJCO1FBQ3pGLHFCQUFxQjtRQUNyQixlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUM7UUFFckMsNEJBQTRCO1FBQzVCLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RCwrRkFBK0Y7UUFDL0YsK0NBQStDO1FBQy9DLDZGQUE2RjtRQUM3RixJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ2xCLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDO1FBQzdDLENBQUM7YUFBTSxDQUFDO1lBQ04sMkRBQTJEO1lBQzNELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxjQUFjLENBQUM7UUFDOUMsQ0FBQztRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxTQUFTLENBQUMsS0FBYTtRQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ3hDLENBQUM7K0dBbkdVLGVBQWU7bUhBQWYsZUFBZTs7NEZBQWYsZUFBZTtrQkFEM0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIHNpZ25hbCwgV3JpdGFibGVTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmlld3BvcnRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbHMvY29tbW9uJztcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSB2aWV3cG9ydCBhZGFwdGVyLlxyXG4gKiBQcm92aWRlcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIHRvIGludGVyYWN0IHdpdGggYSB2aWV3cG9ydCBhbmQgaXRzIGNvbnRlbnQuXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBWaWV3cG9ydEFkYXB0ZXIge1xyXG5cclxuICAvKipcclxuICAgKiBWaWV3cG9ydCBuYXRpdmUgZWxlbWVudFxyXG4gICAqL1xyXG4gIG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbGVtZW50IHRoYXQgd3JhcHMgdGhlIGNvbnRlbnQgaW5zaWRlIHRoZSB2aWV3cG9ydCxcclxuICAgKiB1c2VkIHRvIG1lYXN1cmUgdGhlIGNvbnRlbnQgc2l6ZSBhbmQgb2JzZXJ2ZSBpdHMgY2hhbmdlcy5cclxuICAgKi9cclxuICBjb250ZW50V3JhcHBlckVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG5cclxuICAvKlxyXG4gICAqIEEgc2lnbmFsIHRoYXQgaW5kaWNhdGVzIHdoZW4gdmlld3BvcnQgYWRhcHRlciBpcyBpbml0aWFsaXplZFxyXG4gICAqL1xyXG4gIGluaXRpYWxpemVkOiBXcml0YWJsZVNpZ25hbDxib29sZWFuPiA9IHNpZ25hbChmYWxzZSk7XHJcblxyXG4gIC8qKiBWaWV3cG9ydCBjbGllbnRIZWlnaHQgKi9cclxuICBnZXQgb2Zmc2V0SGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICB9XHJcblxyXG4gIC8qKiBWaWV3cG9ydCBjbGllbnRXaWR0aCAqL1xyXG4gIGdldCBvZmZzZXRXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICB9XHJcblxyXG4gIC8qKiBWaWV3cG9ydCBzY3JvbGxUb3AgKi9cclxuICBnZXQgc2Nyb2xsVG9wKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcDtcclxuICB9XHJcblxyXG4gIC8qKiBWaWV3cG9ydCBzY3JvbGxMZWZ0ICovXHJcbiAgZ2V0IHNjcm9sbExlZnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdDtcclxuICB9XHJcblxyXG4gIC8qKiBDb250ZW50IGhlaWdodCAqL1xyXG4gIGdldCBjb250ZW50SGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50V3JhcHBlckVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqIENvbnRlbnQgd2lkdGggKi9cclxuICBnZXQgY29udGVudFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50V3JhcHBlckVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgfVxyXG5cclxuICAvKiogVGhlIHJlbWFpbmluZyB2ZXJ0aWNhbCBzY3JvbGxhYmxlIGRpc3RhbmNlLiAqL1xyXG4gIGdldCBzY3JvbGxNYXhYKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50V2lkdGggLSB0aGlzLm9mZnNldFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgLyoqIFRoZSB2ZXJ0aWNhbCByZW1haW5pbmcgc2Nyb2xsYWJsZSBkaXN0YW5jZSAqL1xyXG4gIGdldCBzY3JvbGxNYXhZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50SGVpZ2h0IC0gdGhpcy5vZmZzZXRIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHZpZXdwb3J0XHJcbiAgICovXHJcbiAgaW5pdCh2aWV3cG9ydEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb250ZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIHNwYWNlckVsZW1lbnQ/OiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgLy8gQWRkIHZpZXdwb3J0IGNsYXNzXHJcbiAgICB2aWV3cG9ydEVsZW1lbnQuY2xhc3NMaXN0LmFkZChWaWV3cG9ydENsYXNzZXMuVmlld3BvcnQpO1xyXG4gICAgdGhpcy5uYXRpdmVFbGVtZW50ID0gdmlld3BvcnRFbGVtZW50O1xyXG5cclxuICAgIC8vIEFkZCBjb250ZW50IHdyYXBwZXIgY2xhc3NcclxuICAgIGNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoVmlld3BvcnRDbGFzc2VzLkNvbnRlbnQpO1xyXG5cclxuICAgIC8vIFdoZW4gaW50ZWdyYXRpbmcgdGhlIHNjcm9sbGJhciB3aXRoIHZpcnR1YWwgc2Nyb2xsLCB0aGUgY29udGVudCB3cmFwcGVyIHdpbGwgaGF2ZSBmYWtlIHNpemUsXHJcbiAgICAvLyBhbmQgYSBzcGFjZXIgZWxlbWVudCB3aWxsIGhhdmUgdGhlIHJlYWwgc2l6ZVxyXG4gICAgLy8gVGhlcmVmb3JlLCBpZiBzcGFjZUVsZW1lbnQgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgb2JzZXJ2ZWQgaW5zdGVhZCBvZiB0aGUgY29udGVudCB3cmFwcGVyXHJcbiAgICBpZiAoc3BhY2VyRWxlbWVudCkge1xyXG4gICAgICBzcGFjZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoVmlld3BvcnRDbGFzc2VzLlNwYWNlcik7XHJcbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50ID0gc3BhY2VyRWxlbWVudDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIElmIHNwYWNlciBpcyBub3QgcHJvdmlkZWQsIHNldCBpdCBhcyB0aGUgY29udGVudCB3cmFwcGVyXHJcbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50ID0gY29udGVudEVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLmluaXRpYWxpemVkLnNldCh0cnVlKTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5uYXRpdmVFbGVtZW50ID0gbnVsbDtcclxuICAgIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50ID0gbnVsbDtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZWQuc2V0KGZhbHNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNjcm9sbHMgdGhlIHZpZXdwb3J0IHZlcnRpY2FsbHkgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS5cclxuICAgKi9cclxuICBzY3JvbGxZVG8odmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2Nyb2xscyB0aGUgdmlld3BvcnQgaG9yaXpvbnRhbGx5IHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgc2Nyb2xsWFRvKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID0gdmFsdWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==