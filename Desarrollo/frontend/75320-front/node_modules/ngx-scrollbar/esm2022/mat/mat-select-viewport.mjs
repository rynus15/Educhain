import { Directive, effect, inject, untracked } from '@angular/core';
import { MatSelect } from '@angular/material/select';
import { NG_SCROLLBAR } from 'ngx-scrollbar';
import * as i0 from "@angular/core";
export class NgScrollbarMatSelectViewport {
    constructor() {
        this.scrollbar = inject(NG_SCROLLBAR, { self: true });
        this.matSelect = inject(MatSelect);
        effect(() => {
            const isVerticallyScrollable = this.scrollbar.isVerticallyScrollable();
            untracked(() => {
                if (isVerticallyScrollable && this.matSelect.panelOpen) {
                    const selected = this.matSelect.selected;
                    if (selected) {
                        const element = Array.isArray(selected) ? selected[0]._getHostElement() : selected._getHostElement();
                        const height = this.scrollbar.nativeElement.clientHeight;
                        this.scrollbar.viewport.scrollYTo(element.offsetTop + element.offsetHeight - height);
                    }
                }
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarMatSelectViewport, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.11", type: NgScrollbarMatSelectViewport, isStandalone: true, selector: "ng-scrollbar[matSelectViewport]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: NgScrollbarMatSelectViewport, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-scrollbar[matSelectViewport]'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC12aWV3cG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvbWF0L3NyYy9tYXQtc2VsZWN0LXZpZXdwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFhLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBZ0IsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zRCxNQUFNLE9BQU8sNEJBQTRCO0lBTXZDO1FBSmlCLGNBQVMsR0FBaUIsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRS9ELGNBQVMsR0FBYyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFHeEQsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLE1BQU0sc0JBQXNCLEdBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBRWhGLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2IsSUFBSSxzQkFBc0IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUN2RCxNQUFNLFFBQVEsR0FBNEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7b0JBQ2xFLElBQUksUUFBUSxFQUFFLENBQUM7d0JBQ2IsTUFBTSxPQUFPLEdBQWdCLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUNsSCxNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7d0JBQ2pFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLENBQUM7b0JBQ3ZGLENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOytHQXJCVSw0QkFBNEI7bUdBQTVCLDRCQUE0Qjs7NEZBQTVCLDRCQUE0QjtrQkFKeEMsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGlDQUFpQztpQkFDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGVmZmVjdCwgaW5qZWN0LCB1bnRyYWNrZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWF0T3B0aW9uLCBNYXRTZWxlY3QgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3QnO1xyXG5pbXBvcnQgeyBfTmdTY3JvbGxiYXIsIE5HX1NDUk9MTEJBUiB9IGZyb20gJ25neC1zY3JvbGxiYXInO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBzZWxlY3RvcjogJ25nLXNjcm9sbGJhclttYXRTZWxlY3RWaWV3cG9ydF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Njcm9sbGJhck1hdFNlbGVjdFZpZXdwb3J0IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGxiYXI6IF9OZ1Njcm9sbGJhciA9IGluamVjdChOR19TQ1JPTExCQVIsIHsgc2VsZjogdHJ1ZSB9KTtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBtYXRTZWxlY3Q6IE1hdFNlbGVjdCA9IGluamVjdChNYXRTZWxlY3QpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGlzVmVydGljYWxseVNjcm9sbGFibGU6IGJvb2xlYW4gPSB0aGlzLnNjcm9sbGJhci5pc1ZlcnRpY2FsbHlTY3JvbGxhYmxlKCk7XHJcblxyXG4gICAgICB1bnRyYWNrZWQoKCkgPT4ge1xyXG4gICAgICAgIGlmIChpc1ZlcnRpY2FsbHlTY3JvbGxhYmxlICYmIHRoaXMubWF0U2VsZWN0LnBhbmVsT3Blbikge1xyXG4gICAgICAgICAgY29uc3Qgc2VsZWN0ZWQ6IE1hdE9wdGlvbiB8IE1hdE9wdGlvbltdID0gdGhpcy5tYXRTZWxlY3Quc2VsZWN0ZWQ7XHJcbiAgICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBBcnJheS5pc0FycmF5KHNlbGVjdGVkKSA/IHNlbGVjdGVkWzBdLl9nZXRIb3N0RWxlbWVudCgpIDogc2VsZWN0ZWQuX2dldEhvc3RFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodDogbnVtYmVyID0gdGhpcy5zY3JvbGxiYXIubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsYmFyLnZpZXdwb3J0LnNjcm9sbFlUbyhlbGVtZW50Lm9mZnNldFRvcCArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==